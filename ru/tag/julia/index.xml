<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Julia | Д. С. Кулябов</title><link>https://yamadharma.github.io/ru/tag/julia/</link><atom:link href="https://yamadharma.github.io/ru/tag/julia/index.xml" rel="self" type="application/rss+xml"/><description>Julia</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>ru-ru</language><copyright>© 2025 Dmitry S. Kulyabov</copyright><lastBuildDate>Thu, 23 Nov 2023 19:50:00 +0300</lastBuildDate><image><url>https://yamadharma.github.io/media/icon_hu_c0ee34e0b47a9b95.png</url><title>Julia</title><link>https://yamadharma.github.io/ru/tag/julia/</link></image><item><title>Emacs. Julia. Julia Snail</title><link>https://yamadharma.github.io/ru/post/2023/11/23/emacs-julia-julia-snail/</link><pubDate>Thu, 23 Nov 2023 19:50:00 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2023/11/23/emacs-julia-julia-snail/</guid><description>&lt;p>Пакет &lt;em>Julia Snail&lt;/em> для Emacs.&lt;/p>
&lt;details class="print:hidden xl:hidden" >
&lt;summary>Содержание&lt;/summary>
&lt;div class="text-sm">
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#общая-информация">&lt;span class="section-num">1&lt;/span> Общая информация&lt;/a>&lt;/li>
&lt;li>&lt;a href="#основные-сочетания-клавиш">&lt;span class="section-num">2&lt;/span> Основные сочетания клавиш&lt;/a>&lt;/li>
&lt;li>&lt;a href="#использование">&lt;span class="section-num">3&lt;/span> Использование&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;/details>
&lt;h2 id="общая-информация">&lt;span class="section-num">1&lt;/span> Общая информация&lt;/h2>
&lt;ul>
&lt;li>Репозиторий: &lt;a href="https://github.com/gcv/julia-snail" target="_blank" rel="noopener">https://github.com/gcv/julia-snail&lt;/a>&lt;/li>
&lt;li>Эмуляторы терминала: vterm или Eat для отображения REPL.&lt;/li>
&lt;li>Обеспечивает связь между кодом Julia и процессом Julia, работающим в REPL.&lt;/li>
&lt;li>Позволяет загружать целые файлы и отдельные функции в запущенные процессы Julia.&lt;/li>
&lt;li>Удалённые REPL.&lt;/li>
&lt;li>Мультимедиа и построение графиков.&lt;/li>
&lt;li>Использует CSTParser (&lt;a href="https://github.com/julia-vscode/CSTParser.jl" target="_blank" rel="noopener">https://github.com/julia-vscode/CSTParser.jl&lt;/a>) для определения структуры исходных файлов.&lt;/li>
&lt;/ul>
&lt;h2 id="основные-сочетания-клавиш">&lt;span class="section-num">2&lt;/span> Основные сочетания клавиш&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Комбинация&lt;/th>
&lt;th>Команда&lt;/th>
&lt;th>Описание&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>C-c C-z&lt;/code>&lt;/td>
&lt;td>&lt;code>julia-snail&lt;/code>&lt;/td>
&lt;td>Запуск REPL; переключение между REPL и исходным кодом&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c C-a&lt;/code>&lt;/td>
&lt;td>&lt;code>julia-snail-package-activate&lt;/code>&lt;/td>
&lt;td>Активация проекта, используя &lt;code>Project.toml&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c C-d&lt;/code>&lt;/td>
&lt;td>&lt;code>julia-snail-doc-lookup&lt;/code>&lt;/td>
&lt;td>Отображает документацию для идентификатора&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c C-l&lt;/code>&lt;/td>
&lt;td>&lt;code>julia-snail-send-line&lt;/code>&lt;/td>
&lt;td>Скопировать строку в REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c C-r&lt;/code>&lt;/td>
&lt;td>&lt;code>julia-snail-send-region&lt;/code>&lt;/td>
&lt;td>Скопировать регион в REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c C-e&lt;/code>&lt;/td>
&lt;td>&lt;code>julia-snail-send-dwim&lt;/code>&lt;/td>
&lt;td>Скопировать в REPL то, что надо&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c C-c&lt;/code>&lt;/td>
&lt;td>&lt;code>julia-snail-send-top-level-form&lt;/code>&lt;/td>
&lt;td>Послать блок&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-M-x&lt;/code>&lt;/td>
&lt;td>&lt;code>julia-snail-send-top-level-form&lt;/code>&lt;/td>
&lt;td>Послать блок&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c C-k&lt;/code>&lt;/td>
&lt;td>&lt;code>julia-snail-send-buffer-file&lt;/code>&lt;/td>
&lt;td>Послать файл&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c C-R&lt;/code>&lt;/td>
&lt;td>&lt;code>julia-snail-update-module-cache&lt;/code>&lt;/td>
&lt;td>Обновить кэш модулей&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="использование">&lt;span class="section-num">3&lt;/span> Использование&lt;/h2>
&lt;ul>
&lt;li>Откройте исходный файл Julia.&lt;/li>
&lt;li>Запустите REPL Julia, используя &lt;code>M-x julia-snail&lt;/code> или &lt;code>C-c C-z&lt;/code>.
&lt;ul>
&lt;li>Это загрузит весь вспомогательный код на стороне Julia, который требуется Snail, и запустит сервер.&lt;/li>
&lt;li>Сервер работает через TCP-порт (по умолчанию 10011) на локальном хосте.&lt;/li>
&lt;li>Вы увидите &lt;code>JuliaSnail.start(&amp;lt;port&amp;gt;)&lt;/code> в REPL.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Если программа Julia использует &lt;code>Pkg&lt;/code>, запустите &lt;code>M-x julia-snail-package-activate&lt;/code> или &lt;code>C-c C-a&lt;/code> для его включения.&lt;/li>
&lt;li>Загрузите текущий исходный файл Julia, используя &lt;code>M-x julia-snail-send-buffer-file&lt;/code> или &lt;code>C-c C-k&lt;/code>.
&lt;ul>
&lt;li>REPL не отображает вызов &lt;code>include()&lt;/code>.&lt;/li>
&lt;li>Чтобы прервать задачу Julia, запущенную со стороны Emacs, используйте &lt;code>julia-snail-interrupt-task&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Emacs. Julia. Julia-repl</title><link>https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia-julia-repl/</link><pubDate>Fri, 21 Jan 2022 18:03:00 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia-julia-repl/</guid><description>&lt;p>Реализация REPL для &lt;em>Julia&lt;/em> в &lt;em>Emacs&lt;/em>.&lt;/p>
&lt;details class="print:hidden xl:hidden" >
&lt;summary>Содержание&lt;/summary>
&lt;div class="text-sm">
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#общая-информация">&lt;span class="section-num">1&lt;/span> Общая информация&lt;/a>&lt;/li>
&lt;li>&lt;a href="#сочетания-клавиш">&lt;span class="section-num">2&lt;/span> Сочетания клавиш&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;/details>
&lt;h2 id="общая-информация">&lt;span class="section-num">1&lt;/span> Общая информация&lt;/h2>
&lt;ul>
&lt;li>Репозиторий: &lt;a href="https://github.com/tpapp/julia-repl" target="_blank" rel="noopener">https://github.com/tpapp/julia-repl&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="сочетания-клавиш">&lt;span class="section-num">2&lt;/span> Сочетания клавиш&lt;/h2>
&lt;div class="table-caption">
&lt;span class="table-number">&amp;#1058;&amp;#1072;&amp;#1073;&amp;#1083;&amp;#1080;&amp;#1094;&amp;#1072; 1:&lt;/span>
Сочетание клавишь при работе с julia-repl
&lt;/div>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Сочетание&lt;/th>
&lt;th>Действие&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>C-c&lt;/code> &lt;code>C-a&lt;/code>&lt;/td>
&lt;td>активировать, если в родительских каталогах есть &lt;code>Project.toml&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-u&lt;/code> &lt;code>C-c&lt;/code> &lt;code>C-a&lt;/code>&lt;/td>
&lt;td>активировать домашний проект&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c&lt;/code> &lt;code>C-b&lt;/code>&lt;/td>
&lt;td>отправить весь буфер в REPL (используя &lt;code>include&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-u&lt;/code> &lt;code>C-c&lt;/code> &lt;code>C-b&lt;/code>&lt;/td>
&lt;td>отправить весь буфер в REPL (напрямую)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c&lt;/code> &lt;code>C-c&lt;/code>&lt;/td>
&lt;td>отправить регион (если применимо) или строку в REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c&lt;/code> &lt;code>C-d&lt;/code>&lt;/td>
&lt;td>вызвать &lt;code>@doc&lt;/code> для символа&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c&lt;/code> &lt;code>C-e&lt;/code>&lt;/td>
&lt;td>вызвать &lt;code>@edit&lt;/code> для региона (если применимо) или строки&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c&lt;/code> &lt;code>C-l&lt;/code>&lt;/td>
&lt;td>список методов функции&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c&lt;/code> &lt;code>C-m&lt;/code>&lt;/td>
&lt;td>развернуть макрос&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c&lt;/code> &lt;code>C-p&lt;/code>&lt;/td>
&lt;td>изменить каталог на каталог буфера&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c&lt;/code> &lt;code>C-s&lt;/code>&lt;/td>
&lt;td>запрашивать суффикс имени буфера&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c&lt;/code> &lt;code>C-t&lt;/code>&lt;/td>
&lt;td>отправить весь буфер в REPL (используя &lt;code>Revise.includet&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c&lt;/code> &lt;code>C-v&lt;/code>&lt;/td>
&lt;td>запрос исполняемого файла Julia&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-c&lt;/code> &lt;code>C-z&lt;/code>&lt;/td>
&lt;td>показать REPL или создать новый (или переключиться обратно на REPL &amp;mdash; только в бэкэнде &lt;code>vterm&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-RET&lt;/code>&lt;/td>
&lt;td>отправить строку в REPL (без bracketed вставки)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Emacs. Julia. Julia-mode</title><link>https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia-julia-mode/</link><pubDate>Fri, 21 Jan 2022 17:26:00 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia-julia-mode/</guid><description>&lt;p>Базовый минимальный режим поддержки языка программирования &lt;em>Julia&lt;/em>&lt;/p>
&lt;details class="print:hidden xl:hidden" >
&lt;summary>Содержание&lt;/summary>
&lt;div class="text-sm">
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#общая-информация">&lt;span class="section-num">1&lt;/span> Общая информация&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;/details>
&lt;h2 id="общая-информация">&lt;span class="section-num">1&lt;/span> Общая информация&lt;/h2>
&lt;ul>
&lt;li>Репозиторий: &lt;a href="https://github.com/JuliaEditorSupport/julia-emacs" target="_blank" rel="noopener">https://github.com/JuliaEditorSupport/julia-emacs&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Emacs. Julia</title><link>https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia/</link><pubDate>Fri, 21 Jan 2022 17:13:00 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia/</guid><description>&lt;p>Поддержка редактором &lt;em>Emacs&lt;/em> языка научного программирования &lt;em>Julia&lt;/em>.&lt;/p>
&lt;details class="print:hidden xl:hidden" >
&lt;summary>Содержание&lt;/summary>
&lt;div class="text-sm">
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#базовые-режимы">&lt;span class="section-num">1&lt;/span> Базовые режимы&lt;/a>&lt;/li>
&lt;li>&lt;a href="#режим-repl">&lt;span class="section-num">2&lt;/span> Режим REPL&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;/details>
&lt;h2 id="базовые-режимы">&lt;span class="section-num">1&lt;/span> Базовые режимы&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia-julia-mode/">Emacs. Julia. Julia-mode&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="режим-repl">&lt;span class="section-num">2&lt;/span> Режим REPL&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia-julia-repl/">Emacs. Julia. Julia-repl&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yamadharma.github.io/ru/post/2023/11/23/emacs-julia-julia-snail/">Emacs. Julia. Julia Snail&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Язык программирования Julia</title><link>https://yamadharma.github.io/ru/post/2022/01/21/julia-programming-language/</link><pubDate>Fri, 21 Jan 2022 16:52:00 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2022/01/21/julia-programming-language/</guid><description>&lt;p>Язык научного программирования &lt;em>Julia&lt;/em>.&lt;/p>
&lt;details class="print:hidden xl:hidden" >
&lt;summary>Содержание&lt;/summary>
&lt;div class="text-sm">
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#общая-информация">&lt;span class="section-num">1&lt;/span> Общая информация&lt;/a>&lt;/li>
&lt;li>&lt;a href="#поддержка-редакторами">&lt;span class="section-num">2&lt;/span> Поддержка редакторами&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#vscode">&lt;span class="section-num">2.1&lt;/span> VSCode&lt;/a>&lt;/li>
&lt;li>&lt;a href="#emacs">&lt;span class="section-num">2.2&lt;/span> Emacs&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#пакеты">&lt;span class="section-num">3&lt;/span> Пакеты&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#дифференциальные-уравнения">&lt;span class="section-num">3.1&lt;/span> Дифференциальные уравнения&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;/details>
&lt;h2 id="общая-информация">&lt;span class="section-num">1&lt;/span> Общая информация&lt;/h2>
&lt;ul>
&lt;li>Сайт: &lt;a href="https://julialang.org/" target="_blank" rel="noopener">https://julialang.org/&lt;/a>&lt;/li>
&lt;li>Репозиторий: &lt;a href="https://github.com/JuliaLang/julia" target="_blank" rel="noopener">https://github.com/JuliaLang/julia&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="поддержка-редакторами">&lt;span class="section-num">2&lt;/span> Поддержка редакторами&lt;/h2>
&lt;h3 id="vscode">&lt;span class="section-num">2.1&lt;/span> VSCode&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://yamadharma.github.io/ru/post/2021/01/05/vscode-julia/">VSCode. Julia&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="emacs">&lt;span class="section-num">2.2&lt;/span> Emacs&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia/">Emacs. Julia&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="пакеты">&lt;span class="section-num">3&lt;/span> Пакеты&lt;/h2>
&lt;h3 id="дифференциальные-уравнения">&lt;span class="section-num">3.1&lt;/span> Дифференциальные уравнения&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://yamadharma.github.io/ru/post/2021/01/02/julia-differentialequations-callback-functions/">Julia. DifferentialEquations.jl. Callback functions&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>VSCode. Julia</title><link>https://yamadharma.github.io/ru/post/2021/01/05/vscode-julia/</link><pubDate>Tue, 05 Jan 2021 19:48:00 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2021/01/05/vscode-julia/</guid><description>&lt;p>Работа с языком программирования &lt;em>Julia&lt;/em> из редактора VSCode.&lt;/p>
&lt;details class="print:hidden xl:hidden" >
&lt;summary>Содержание&lt;/summary>
&lt;div class="text-sm">
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#расширения-vscode">&lt;span class="section-num">1&lt;/span> Расширения VSCode&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#julia-for-vscode">&lt;span class="section-num">1.1&lt;/span> Julia for VSCode&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#сочетания-клавиш-для-repl">&lt;span class="section-num">1.1.1&lt;/span> Сочетания клавиш для REPL&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;/details>
&lt;h2 id="расширения-vscode">&lt;span class="section-num">1&lt;/span> Расширения VSCode&lt;/h2>
&lt;h3 id="julia-for-vscode">&lt;span class="section-num">1.1&lt;/span> Julia for VSCode&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.julia-vscode.org/" target="_blank" rel="noopener">https://www.julia-vscode.org/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/julia-vscode/julia-vscode" target="_blank" rel="noopener">https://github.com/julia-vscode/julia-vscode&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="сочетания-клавиш-для-repl">&lt;span class="section-num">1.1.1&lt;/span> Сочетания клавиш для REPL&lt;/h4>
&lt;!--list-separator-->
&lt;ol>
&lt;li>
&lt;p>Исполнить код &lt;em>Julia: Execute Code&lt;/em> (&lt;code>Ctrl+Enter&lt;/code>)&lt;/p>
&lt;ul>
&lt;li>Эта команда либо отправит текст, который в данный момент выбран в активном редакторе, в Julia REPL, либо отправит всю строку, в которой в данный момент находится курсор, когда текст не выделен. В последнем случае он также переместит курсор на следующую строку кода.&lt;/li>
&lt;li>Эта команда работает как copy-paste: она буквально копирует некоторый код из редактора в REPL, как если бы этот код был набран в REPL.&lt;/li>
&lt;li>Операторы &lt;code>include&lt;/code> всегда будут пытаться загрузить относительные пути относительно текущего рабочего каталога, а не относительно файла, из которого они выполняются.&lt;/li>
&lt;li>Такие макросы, как &lt;code>@__DIR__&lt;/code> и &lt;code>@__FILE__&lt;/code>, не работают должным образом. В этом случае следует использовать команду &lt;em>Julia: Execute Code Block&lt;/em>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;!--list-separator-->
&lt;ol start="2">
&lt;li>
&lt;p>Исполнить блок кода &lt;em>Julia: Execute Code Block&lt;/em> (&lt;code>Alt+Enter&lt;/code>)&lt;/p>
&lt;ul>
&lt;li>Всякий раз, когда в текущем активном редакторе выбран какой-то код Julia, эта команда выполнит выбранный код. Если текст не выбран, команда определит всю языковую конструкции верхнего уровня, в которой находится курсор (кроме модулей), и выполнит этот блок кода.&lt;/li>
&lt;li>При выполнении связывается информацию о местоположении с выполняемым кодом, &lt;code>include&lt;/code> будет правильно работать с относительными путями, а макросы, такие как &lt;code>@__DIR__&lt;/code> и &lt;code>@__FILE__&lt;/code>, будут работать должным образом.&lt;/li>
&lt;li>Следует использовать как команду по умолчанию для запуска кода Julia в REPL.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;!--list-separator-->
&lt;ol start="3">
&lt;li>
&lt;p>Исполнить ячейку кода &lt;em>Julia: Execute Code Cell&lt;/em> (&lt;code>Shift+Enter&lt;/code>)&lt;/p>
&lt;ul>
&lt;li>Расширение обеспечивает поддержку разметки ячеек кода в стандартных файлах Julia с помощью специально отформатированного комментария:&lt;/li>
&lt;/ul>
&lt;!--listend-->
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="c">##&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Эта команда определит, в какой ячейке кода в данный момент находится курсор в активном редакторе, а затем выполнит код в этой ячейке. Если в текущем файле нет ячеек кода, он выполнит весь файл. Эта команда использует те же методы выполнения кода, что и команда &lt;em>Julia: Execute Code Block&lt;/em>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;!--list-separator-->
&lt;ol start="4">
&lt;li>
&lt;p>Исполнить файл &lt;em>Julia: Execute File&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Эта команда запускает все содержимое текущего активного файла в Julia REPL. Он использует те же методы выполнения кода, что и команда &lt;em>Julia: Execute Code Block&lt;/em>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Julia. DifferentialEquations.jl. Callback functions</title><link>https://yamadharma.github.io/ru/post/2021/01/02/julia-differentialequations-callback-functions/</link><pubDate>Sat, 02 Jan 2021 14:04:00 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2021/01/02/julia-differentialequations-callback-functions/</guid><description>&lt;p>Использование обратного вызова функций в пакете &lt;em>DifferentialEquations.jl&lt;/em>.&lt;/p>
&lt;details class="print:hidden xl:hidden" >
&lt;summary>Содержание&lt;/summary>
&lt;div class="text-sm">
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#типы-обратных-вызовов">&lt;span class="section-num">1&lt;/span> Типы обратных вызовов&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#непрерывный-обратный-вызов">&lt;span class="section-num">1.1&lt;/span> Непрерывный обратный вызов&lt;/a>&lt;/li>
&lt;li>&lt;a href="#дискретный-обратный-вызов">&lt;span class="section-num">1.2&lt;/span> Дискретный обратный вызов&lt;/a>&lt;/li>
&lt;li>&lt;a href="#векторный-непрерывный-обратный-вызов">&lt;span class="section-num">1.3&lt;/span> Векторный непрерывный обратный вызов&lt;/a>&lt;/li>
&lt;li>&lt;a href="#набор-обратных-вызовов">&lt;span class="section-num">1.4&lt;/span> Набор обратных вызовов&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#применение-обратных-вызовов">&lt;span class="section-num">2&lt;/span> Применение обратных вызовов&lt;/a>&lt;/li>
&lt;li>&lt;a href="#примеры">&lt;span class="section-num">3&lt;/span> Примеры&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/div>
&lt;/details>
&lt;h2 id="типы-обратных-вызовов">&lt;span class="section-num">1&lt;/span> Типы обратных вызовов&lt;/h2>
&lt;ul>
&lt;li>&lt;code>ContinuousCallback&lt;/code> (непрерывный): срабатывает, когда непрерывная функция условия достигает нуля. В других средствах реализуется как событие (event).&lt;/li>
&lt;li>&lt;code>DiscreteCallback&lt;/code> (дискретный): срабатывает, когда функция условия истинна.&lt;/li>
&lt;li>&lt;code>VectorContinuousCallback&lt;/code> (векторный): эквивалентен вектору непрерывных обратных вызовов. Позволяет указать, когда вызывается какой обратный вызов.&lt;/li>
&lt;/ul>
&lt;h3 id="непрерывный-обратный-вызов">&lt;span class="section-num">1.1&lt;/span> Непрерывный обратный вызов&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ContinuousCallback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">affect!&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">affect_neg!&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">initialize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">INITIALIZE_DEFAULT&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">idxs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">nothing&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rootfind&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">save_positions&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">interp_points&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">abstol&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="n">eps&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="n">reltol&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="дискретный-обратный-вызов">&lt;span class="section-num">1.2&lt;/span> Дискретный обратный вызов&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">DiscreteCallback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">affect!&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">initialize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">INITIALIZE_DEFAULT&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">save_positions&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>condition&lt;/code> - функция &lt;code>condition(u,t,integrator)&lt;/code>, определяющая, когда следует использовать обратный вызов. Обратный вызов инициируется, если условие истинно (&lt;code>true&lt;/code>).&lt;/li>
&lt;li>&lt;code>affect!&lt;/code> - функция &lt;code>affect!(integrator)&lt;/code>, которая может изменять текущее состояние интегратора.&lt;/li>
&lt;li>&lt;code>save_positions&lt;/code> - логический кортеж для сохранения до или после &lt;code>affect!&lt;/code>. Это сохранение может происходить непосредственно до, после события, во время события. Оно не зависит от таких параметров, как &lt;code>saveat&lt;/code>, &lt;code>save_everystep&lt;/code> и т.д. (например, если &lt;code>saveat = [1.0,2.0,3.0]&lt;/code>, то можно добавить точку сохранения в &lt;code>2.1&lt;/code>, если условие верно). Чтобы прерывистые изменения обрабатывались правильно (без ошибок), необходимо установить &lt;code>save_positions = (true, true)&lt;/code>.&lt;/li>
&lt;li>&lt;code>initialize&lt;/code> - функция &lt;code>function(c,u,t,integrator)&lt;/code>, которая может использоваться для инициализации состояния обратного вызова &lt;code>c&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="векторный-непрерывный-обратный-вызов">&lt;span class="section-num">1.3&lt;/span> Векторный непрерывный обратный вызов&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">VectorContinuousCallback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">affect!&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">affect_neg!&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">initialize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">INITIALIZE_DEFAULT&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">idxs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">nothing&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rootfind&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">save_positions&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">interp_points&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">abstol&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="n">eps&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="n">reltol&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">VectorContinuousCallback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">affect!&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">initialize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">INITIALIZE_DEFAULT&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">idxs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">nothing&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rootfind&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">save_positions&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">affect_neg!&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">affect!&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">interp_points&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">abstol&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="n">eps&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="n">reltol&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="набор-обратных-вызовов">&lt;span class="section-num">1.4&lt;/span> Набор обратных вызовов&lt;/h3>
&lt;ul>
&lt;li>Несколько обратных вызовов можно объединить в один набор:&lt;/li>
&lt;/ul>
&lt;!--listend-->
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">CallbackSet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cb1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">cb2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">cb3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Можно передать столько угодно обратных вызовов. Когда решатели обнаруживают несколько обратных вызовов, применяются следующие правила:&lt;/li>
&lt;li>&lt;code>ContinuousCallbacks&lt;/code> и &lt;code>VectorContinuousCallbacks&lt;/code> применяются перед &lt;code>DiscreteCallbacks&lt;/code> (потому, что они часто реализуют обнаружение событий, которое возвращает временной шаг на величину, меньшему, чем &lt;code>dt&lt;/code>).&lt;/li>
&lt;li>Для &lt;code>ContinuousCallbacks&lt;/code> и &lt;code>VectorContinuousCallbacks&lt;/code> применяется только первый из них (шаг времени рассчитывается только по первому).&lt;/li>
&lt;li>Затем по порядку применяются &lt;code>DiscreteCallbacks&lt;/code>. Порядок имеет значение только для условий: если предыдущий обратный вызов изменяет функция таким образом, что следующий обратный вызов больше не считает условие истинным, он не будет применяться.&lt;/li>
&lt;/ul>
&lt;h2 id="применение-обратных-вызовов">&lt;span class="section-num">2&lt;/span> Применение обратных вызовов&lt;/h2>
&lt;ul>
&lt;li>Обратный вызов передаётся решателю:&lt;/li>
&lt;/ul>
&lt;!--listend-->
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sol&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">solve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">prob&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">alg&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">cb&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Когда используется обратный вызов, режим сохранения по умолчанию отключён. Это потому, что в противном случае события дважды сохраняли бы одно из значений. Чтобы снова включить стандартное поведение при сохранении, необходимо, чтобы первое значение &lt;code>save_positions&lt;/code> было истинным хотя бы для одного обратного вызова.&lt;/li>
&lt;li>Общая проблема обратных вызовов заключается в том, что они вызывают большие изменения шага, поэтому после такого изменения может быть разумным уменьшить &lt;code>dt&lt;/code>. Например, &lt;code>set_proposed_dt!&lt;/code> используется для установки следующего шага и &lt;code>terminate!&lt;/code> используется для остановки моделирования.&lt;/li>
&lt;/ul>
&lt;h2 id="примеры">&lt;span class="section-num">3&lt;/span> Примеры&lt;/h2></description></item></channel></rss>