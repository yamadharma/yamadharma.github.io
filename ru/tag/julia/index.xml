<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>julia | Д. С. Кулябов</title>
    <link>https://yamadharma.github.io/ru/tag/julia/</link>
      <atom:link href="https://yamadharma.github.io/ru/tag/julia/index.xml" rel="self" type="application/rss+xml" />
    <description>julia</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ru-ru</language><copyright>© 2022 Dmitry S. Kulyabov</copyright><lastBuildDate>Fri, 21 Jan 2022 18:03:00 +0300</lastBuildDate>
    <image>
      <url>https://yamadharma.github.io/media/icon_hu0a661dd90139895e92e2f18ae9404407_611148_512x512_fill_lanczos_center_3.png</url>
      <title>julia</title>
      <link>https://yamadharma.github.io/ru/tag/julia/</link>
    </image>
    
    <item>
      <title>Emacs. Julia. Julia-repl</title>
      <link>https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia-julia-repl/</link>
      <pubDate>Fri, 21 Jan 2022 18:03:00 +0300</pubDate>
      <guid>https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia-julia-repl/</guid>
      <description>&lt;p&gt;Реализация REPL для &lt;em&gt;Julia&lt;/em&gt; в &lt;em&gt;Emacs&lt;/em&gt;.&lt;/p&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Содержание&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#общая-информация&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Общая информация&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#сочетания-клавиш&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Сочетания клавиш&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;

&lt;h2 id=&#34;общая-информация&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Общая информация&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Репозиторий: &lt;a href=&#34;https://github.com/tpapp/julia-repl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/tpapp/julia-repl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;сочетания-клавиш&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Сочетания клавиш&lt;/h2&gt;
&lt;div class=&#34;table-caption&#34;&gt;
  &lt;span class=&#34;table-number&#34;&gt;&amp;#1058;&amp;#1072;&amp;#1073;&amp;#1083;&amp;#1080;&amp;#1094;&amp;#1072; 1&lt;/span&gt;:
  Сочетание клавишь при работе с julia-repl
&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Сочетание&lt;/th&gt;
&lt;th&gt;Действие&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c&lt;/code&gt; &lt;code&gt;C-a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;активировать, если в родительских каталогах есть &lt;code&gt;Project.toml&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-u&lt;/code&gt; &lt;code&gt;C-c&lt;/code&gt; &lt;code&gt;C-a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;активировать домашний проект&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c&lt;/code&gt; &lt;code&gt;C-b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;отправить весь буфер в REPL (используя &lt;code&gt;include&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-u&lt;/code&gt; &lt;code&gt;C-c&lt;/code&gt; &lt;code&gt;C-b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;отправить весь буфер в REPL (напрямую)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c&lt;/code&gt; &lt;code&gt;C-c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;отправить регион (если применимо) или строку в REPL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c&lt;/code&gt; &lt;code&gt;C-d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;вызвать &lt;code&gt;@doc&lt;/code&gt; для символа&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c&lt;/code&gt; &lt;code&gt;C-e&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;вызвать &lt;code&gt;@edit&lt;/code&gt; для региона (если применимо) или строки&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c&lt;/code&gt; &lt;code&gt;C-l&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;список методов функции&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c&lt;/code&gt; &lt;code&gt;C-m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;развернуть макрос&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c&lt;/code&gt; &lt;code&gt;C-p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;изменить каталог на каталог буфера&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c&lt;/code&gt; &lt;code&gt;C-s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;запрашивать суффикс имени буфера&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c&lt;/code&gt; &lt;code&gt;C-t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;отправить весь буфер в REPL (используя &lt;code&gt;Revise.includet&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c&lt;/code&gt; &lt;code&gt;C-v&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;запрос исполняемого файла Julia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-c&lt;/code&gt; &lt;code&gt;C-z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;показать REPL или создать новый (или переключиться обратно на REPL &amp;mdash; только в бэкэнде &lt;code&gt;vterm&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C-RET&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;отправить строку в REPL (без bracketed вставки)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>Emacs. Julia. Julia-mode</title>
      <link>https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia-julia-mode/</link>
      <pubDate>Fri, 21 Jan 2022 17:26:00 +0300</pubDate>
      <guid>https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia-julia-mode/</guid>
      <description>&lt;p&gt;Базовый минимальный режим поддержки языка программирования &lt;em&gt;Julia&lt;/em&gt;&lt;/p&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Содержание&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#общая-информация&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Общая информация&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;

&lt;h2 id=&#34;общая-информация&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Общая информация&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Репозиторий: &lt;a href=&#34;https://github.com/JuliaEditorSupport/julia-emacs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/JuliaEditorSupport/julia-emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Emacs. Julia</title>
      <link>https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia/</link>
      <pubDate>Fri, 21 Jan 2022 17:13:00 +0300</pubDate>
      <guid>https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia/</guid>
      <description>&lt;p&gt;Поддержка редактором &lt;em&gt;Emacs&lt;/em&gt; языка научного программирования &lt;em&gt;Julia&lt;/em&gt;.&lt;/p&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Содержание&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#базовые-режимы&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Базовые режимы&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#режим-repl&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Режим REPL&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;

&lt;h2 id=&#34;базовые-режимы&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Базовые режимы&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia-julia-mode/&#34;&gt;Emacs. Julia. Julia-mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;режим-repl&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Режим REPL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia-julia-repl/&#34;&gt;Emacs. Julia. Julia-repl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Язык программирования Julia</title>
      <link>https://yamadharma.github.io/ru/post/2022/01/21/julia-programming-language/</link>
      <pubDate>Fri, 21 Jan 2022 16:52:00 +0300</pubDate>
      <guid>https://yamadharma.github.io/ru/post/2022/01/21/julia-programming-language/</guid>
      <description>&lt;p&gt;Язык научного программирования &lt;em&gt;Julia&lt;/em&gt;.&lt;/p&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Содержание&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#общая-информация&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Общая информация&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#поддержка-редакторами&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Поддержка редакторами&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#vscode&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; VSCode&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#emacs&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.2&lt;/span&gt; Emacs&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#пакеты&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; Пакеты&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#дифференциальные-уравнения&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; Дифференциальные уравнения&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;

&lt;h2 id=&#34;общая-информация&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Общая информация&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Сайт: &lt;a href=&#34;https://julialang.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://julialang.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Репозиторий: &lt;a href=&#34;https://github.com/JuliaLang/julia&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/JuliaLang/julia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;поддержка-редакторами&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Поддержка редакторами&lt;/h2&gt;
&lt;h3 id=&#34;vscode&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.1&lt;/span&gt; VSCode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yamadharma.github.io/ru/post/2021/01/05/vscode-julia/&#34;&gt;VSCode. Julia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;emacs&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2.2&lt;/span&gt; Emacs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yamadharma.github.io/ru/post/2022/01/21/emacs-julia/&#34;&gt;Emacs. Julia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;пакеты&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; Пакеты&lt;/h2&gt;
&lt;h3 id=&#34;дифференциальные-уравнения&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3.1&lt;/span&gt; Дифференциальные уравнения&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yamadharma.github.io/ru/post/2021/01/02/julia-differentialequations-callback-functions/&#34;&gt;Julia. DifferentialEquations.jl. Callback functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>VSCode. Julia</title>
      <link>https://yamadharma.github.io/ru/post/2021/01/05/vscode-julia/</link>
      <pubDate>Tue, 05 Jan 2021 19:48:00 +0300</pubDate>
      <guid>https://yamadharma.github.io/ru/post/2021/01/05/vscode-julia/</guid>
      <description>&lt;p&gt;Работа с языком программирования &lt;em&gt;Julia&lt;/em&gt; из редактора VSCode.&lt;/p&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Содержание&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#расширения-vscode&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Расширения VSCode&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#julia-for-vscode&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1.1&lt;/span&gt; Julia for VSCode&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href=&#34;#сочетания-клавиш-для-repl&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1.1.1&lt;/span&gt; Сочетания клавиш для REPL&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;

&lt;h2 id=&#34;расширения-vscode&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Расширения VSCode&lt;/h2&gt;
&lt;h3 id=&#34;julia-for-vscode&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1.1&lt;/span&gt; Julia for VSCode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.julia-vscode.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.julia-vscode.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/julia-vscode/julia-vscode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/julia-vscode/julia-vscode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;сочетания-клавиш-для-repl&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1.1.1&lt;/span&gt; Сочетания клавиш для REPL&lt;/h4&gt;
&lt;!--list-separator--&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Исполнить код &lt;em&gt;Julia: Execute Code&lt;/em&gt; (&lt;code&gt;Ctrl+Enter&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Эта команда либо отправит текст, который в данный момент выбран в
активном редакторе, в Julia REPL, либо отправит всю строку, в которой
в данный момент находится курсор, когда текст не выделен. В последнем
случае он также переместит курсор на следующую строку кода.&lt;/p&gt;
&lt;p&gt;Эта команда работает как copy-paste: она буквально
копирует некоторый код из редактора в REPL, как если бы этот код был
набран в REPL.&lt;/p&gt;
&lt;p&gt;Операторы &lt;code&gt;include&lt;/code&gt; всегда будут пытаться
загрузить относительные пути относительно текущего рабочего каталога,
а не относительно файла, из которого они выполняются.&lt;/p&gt;
&lt;p&gt;Такие макросы,
как &lt;code&gt;@__DIR__&lt;/code&gt; и &lt;code&gt;@__FILE__&lt;/code&gt;, не работают должным образом. В этом случае следует
использовать команду &lt;em&gt;Julia: Execute Code Block&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!--list-separator--&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;Исполнить блок кода &lt;em&gt;Julia: Execute Code Block&lt;/em&gt; (&lt;code&gt;Alt+Enter&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Всякий раз, когда в текущем активном редакторе выбран какой-то код
Julia, эта команда выполнит выбранный код. Если текст не выбран,
команда определит всю языковую конструкции верхнего уровня, в
которой находится курсор (кроме модулей), и выполнит этот блок
кода.&lt;/p&gt;
&lt;p&gt;При выполнении связывается информацию о местоположении с выполняемым кодом,
&lt;code&gt;include&lt;/code&gt; будет правильно работать с относительными путями, а макросы,
такие как &lt;code&gt;@__DIR__&lt;/code&gt; и &lt;code&gt;@__FILE__&lt;/code&gt;, будут работать должным образом.&lt;/p&gt;
&lt;p&gt;Следует использовать как команду по умолчанию для
запуска кода Julia в REPL.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!--list-separator--&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Исполнить ячейку кода &lt;em&gt;Julia: Execute Code Cell&lt;/em&gt; (&lt;code&gt;Shift+Enter&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Расширение обеспечивает поддержку разметки ячеек кода в стандартных
файлах Julia с помощью специально отформатированного комментария:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;##
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Эта команда определит, в какой ячейке кода в данный момент
находится курсор в активном редакторе, а затем выполнит код в этой
ячейке. Если в текущем файле нет ячеек кода, он выполнит весь
файл. Эта команда использует те же методы выполнения кода, что и
команда &lt;em&gt;Julia: Execute Code Block&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!--list-separator--&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;Исполнить файл &lt;em&gt;Julia: Execute File&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Эта команда запускает все содержимое текущего активного файла в Julia
REPL. Он использует те же методы выполнения кода, что и команда
&lt;em&gt;Julia: Execute Code Block&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Julia. DifferentialEquations.jl. Callback functions</title>
      <link>https://yamadharma.github.io/ru/post/2021/01/02/julia-differentialequations-callback-functions/</link>
      <pubDate>Sat, 02 Jan 2021 14:04:00 +0300</pubDate>
      <guid>https://yamadharma.github.io/ru/post/2021/01/02/julia-differentialequations-callback-functions/</guid>
      <description>&lt;p&gt;Использование обратного вызова функций в пакете &lt;em&gt;DifferentialEquations.jl&lt;/em&gt;.&lt;/p&gt;
&lt;details class=&#34;toc-inpage d-print-none  &#34; open&gt;
  &lt;summary class=&#34;font-weight-bold&#34;&gt;Содержание&lt;/summary&gt;
  &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#типы-обратных-вызовов&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Типы обратных вызовов&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#непрерывный-обратный-вызов&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1.1&lt;/span&gt; Непрерывный обратный вызов&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#дискретный-обратный-вызов&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1.2&lt;/span&gt; Дискретный обратный вызов&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#векторный-непрерывный-обратный-вызов&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1.3&lt;/span&gt; Векторный непрерывный обратный вызов&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#набор-обратных-вызовов&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1.4&lt;/span&gt; Набор обратных вызовов&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#применение-обратных-вызовов&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Применение обратных вызовов&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#примеры&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; Примеры&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/details&gt;

&lt;h2 id=&#34;типы-обратных-вызовов&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1&lt;/span&gt; Типы обратных вызовов&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ContinuousCallback&lt;/code&gt; (непрерывный) - срабатывает, когда непрерывная функция условия достигает нуля. В других средствах реализуется как событие (event).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DiscreteCallback&lt;/code&gt; (дискретный) - срабатывает, когда функция условия истинна.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VectorContinuousCallback&lt;/code&gt; (векторный) - эквивалентен вектору непрерывных обратных вызовов. Позволяет указать, когда вызывается какой обратный вызов.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;непрерывный-обратный-вызов&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1.1&lt;/span&gt; Непрерывный обратный вызов&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;ContinuousCallback(condition,affect!,affect_neg!;
		   initialize = INITIALIZE_DEFAULT,
		   idxs = nothing,
		   rootfind=true,
		   save_positions=(true,true),
		   interp_points=10,
		   abstol=10eps(),reltol=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;дискретный-обратный-вызов&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1.2&lt;/span&gt; Дискретный обратный вызов&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;DiscreteCallback(condition,affect!;
		 initialize = INITIALIZE_DEFAULT,
		 save_positions=(true,true))
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;condition&lt;/code&gt; - функция &lt;code&gt;condition(u,t,integrator)&lt;/code&gt;, определяющая, когда следует использовать обратный вызов. Обратный вызов инициируется, если условие истинно (&lt;code&gt;true&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;affect!&lt;/code&gt; - функция &lt;code&gt;affect!(integrator)&lt;/code&gt;, которая может изменять текущее состояние интегратора.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;save_positions&lt;/code&gt; - логический кортеж для сохранения до или после
&lt;code&gt;affect!&lt;/code&gt;. Это сохранение может происходить непосредственно до,
после события, во время события. Оно не зависит от таких
параметров, как &lt;code&gt;saveat&lt;/code&gt;, &lt;code&gt;save_everystep&lt;/code&gt; и т.д. (например, если
&lt;code&gt;saveat = [1.0,2.0,3.0]&lt;/code&gt;, то можно добавить точку сохранения в &lt;code&gt;2.1&lt;/code&gt;, если условие верно). Чтобы прерывистые изменения
обрабатывались правильно (без ошибок), необходимо установить &lt;code&gt;save_positions = (true, true)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;initialize&lt;/code&gt; - функция &lt;code&gt;function(c,u,t,integrator)&lt;/code&gt;, которая может
использоваться для инициализации состояния обратного вызова &lt;code&gt;c&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;векторный-непрерывный-обратный-вызов&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1.3&lt;/span&gt; Векторный непрерывный обратный вызов&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;VectorContinuousCallback(condition,affect!,affect_neg!,len;
			 initialize = INITIALIZE_DEFAULT,
			 idxs = nothing,
			 rootfind=true,
			 save_positions=(true,true),
			 interp_points=10,
			 abstol=10eps(),reltol=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;VectorContinuousCallback(condition,affect!,len;
		   initialize = INITIALIZE_DEFAULT,
		   idxs = nothing,
		   rootfind=true,
		   save_positions=(true,true),
		   affect_neg! = affect!,
		   interp_points=10,
		   abstol=10eps(),reltol=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;набор-обратных-вызовов&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;1.4&lt;/span&gt; Набор обратных вызовов&lt;/h3&gt;
&lt;p&gt;Несколько обратных вызовов можно объединить в один набор:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;CallbackSet(cb1,cb2,cb3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Можно передать столько угодно обратных вызовов. Когда решатели обнаруживают несколько обратных вызовов, применяются следующие правила:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ContinuousCallbacks&lt;/code&gt; и &lt;code&gt;VectorContinuousCallbacks&lt;/code&gt; применяются
перед &lt;code&gt;DiscreteCallbacks&lt;/code&gt; (потому, что они часто реализуют обнаружение событий, которое возвращает временной шаг на величину, меньшему, чем &lt;code&gt;dt&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Для &lt;code&gt;ContinuousCallbacks&lt;/code&gt; и &lt;code&gt;VectorContinuousCallbacks&lt;/code&gt; применяется только первый из них (шаг времени рассчитывается только по первому).&lt;/li&gt;
&lt;li&gt;Затем по порядку применяются &lt;code&gt;DiscreteCallbacks&lt;/code&gt;. Порядок имеет значение только для условий: если предыдущий обратный вызов изменяет функция таким образом, что следующий обратный вызов больше не считает условие истинным, он не будет применяться.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;применение-обратных-вызовов&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;2&lt;/span&gt; Применение обратных вызовов&lt;/h2&gt;
&lt;p&gt;Обратный вызов передаётся решателю:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;sol = solve(prob,alg,callback=cb)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Когда используется обратный вызов, режим сохранения по умолчанию
отключён. Это потому, что в противном случае события дважды
сохраняли бы одно из значений. Чтобы снова включить стандартное
поведение при сохранении, необходимо, чтобы первое значение
&lt;code&gt;save_positions&lt;/code&gt; было истинным хотя бы для одного обратного вызова.&lt;/li&gt;
&lt;li&gt;Общая проблема обратных вызовов заключается в том, что они вызывают
большие изменения шага, поэтому после такого изменения может быть
разумным уменьшить &lt;code&gt;dt&lt;/code&gt;. Например, &lt;code&gt;set_proposed_dt!&lt;/code&gt; используется
для установки следующего шага и &lt;code&gt;terminate!&lt;/code&gt; используется для
остановки моделирования.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;примеры&#34;&gt;&lt;span class=&#34;section-num&#34;&gt;3&lt;/span&gt; Примеры&lt;/h2&gt;</description>
    </item>
    
  </channel>
</rss>
