<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sysadmin | Д. С. Кулябов</title><link>https://yamadharma.github.io/ru/category/sysadmin/</link><atom:link href="https://yamadharma.github.io/ru/category/sysadmin/index.xml" rel="self" type="application/rss+xml"/><description>sysadmin</description><generator>Wowchemy (https://wowchemy.com)</generator><language>ru-ru</language><copyright>© 2023 Dmitry S. Kulyabov</copyright><lastBuildDate>Sun, 18 Apr 2021 20:16:00 +0300</lastBuildDate><image><url>https://yamadharma.github.io/media/icon_hu0a661dd90139895e92e2f18ae9404407_611148_512x512_fill_lanczos_center_3.png</url><title>sysadmin</title><link>https://yamadharma.github.io/ru/category/sysadmin/</link></image><item><title>Варианты Git Workflow</title><link>https://yamadharma.github.io/ru/post/2021/04/18/git-workflow/</link><pubDate>Sun, 18 Apr 2021 20:16:00 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2021/04/18/git-workflow/</guid><description>&lt;p>Варианты построения рабочего процесса на базе git.&lt;/p>
&lt;details class="toc-inpage d-print-none " open>
&lt;summary class="font-weight-bold">Содержание&lt;/summary>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#github-flow">Github flow&lt;/a>&lt;/li>
&lt;li>&lt;a href="#git-flow">Git flow&lt;/a>&lt;/li>
&lt;li>&lt;a href="#backlinks">Backlinks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/details>
&lt;h2 id="github-flow">Github flow&lt;/h2>
&lt;p>Есть мастер. Когда необходимо что-то добавить, делается новая ветка: `feature branch`, `bugfix branch` etc.&lt;/p>
&lt;h2 id="git-flow">Git flow&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://yamadharma.github.io/ru/post/2021/04/18/gitflow-workflow/">Рабочий процесс Gitflow&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="backlinks">Backlinks&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://yamadharma.github.io/ru/post/2020/12/07/git-cvs/">Система контроля версий git&lt;/a>&lt;/li>
&lt;/ul>
&lt;!--listend-->
&lt;ul>
&lt;li>&lt;a href="https://yamadharma.github.io/ru/post/2021/01/17/git-practical-use-case/">Практический сценарий использования git&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Семантическое версионирование. Conventional Changelog</title><link>https://yamadharma.github.io/ru/post/2021/01/16/semantic-versioning-conventional-changelog/</link><pubDate>Sat, 16 Jan 2021 17:41:00 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2021/01/16/semantic-versioning-conventional-changelog/</guid><description>&lt;p>Пакет &lt;em>Conventional Changelog&lt;/em> представляет собой набор утилит. Их можно использовать как вместе, так и по отдельности. Также можно задавать свой рабочий процесс.&lt;/p>
&lt;details class="toc-inpage d-print-none " open>
&lt;summary class="font-weight-bold">Содержание&lt;/summary>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#репозитории">Репозитории&lt;/a>&lt;/li>
&lt;li>&lt;a href="#список-утилит">Список утилит&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#основные-утилиты-проекта">Основные утилиты проекта&lt;/a>&lt;/li>
&lt;li>&lt;a href="#дополнительные-утилиты">Дополнительные утилиты&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#настройка-утилит">Настройка утилит&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#conventional-commits-detector">conventional-commits-detector&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#установка">Установка&lt;/a>&lt;/li>
&lt;li>&lt;a href="#использование">Использование&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#conventional-recommended-bump">conventional-recommended-bump&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#установка">Установка&lt;/a>&lt;/li>
&lt;li>&lt;a href="#использование">Использование&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#standard-changelog">standard-changelog&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#установка">Установка&lt;/a>&lt;/li>
&lt;li>&lt;a href="#использование">Использование&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#conventional-changelog-cli">conventional-changelog-cli&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#установка">Установка&lt;/a>&lt;/li>
&lt;li>&lt;a href="#использование">Использование&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#commitizen">commitizen&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#установка">Установка&lt;/a>&lt;/li>
&lt;li>&lt;a href="#использование">Использование&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#conventional-github-releaser">conventional-github-releaser&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#установка">Установка&lt;/a>&lt;/li>
&lt;li>&lt;a href="#использование">Использование&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#примерный-рабочий-процесс">Примерный рабочий процесс&lt;/a>&lt;/li>
&lt;li>&lt;a href="#backlinks">Backlinks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/details>
&lt;h2 id="репозитории">Репозитории&lt;/h2>
&lt;ul>
&lt;li>Основной монорепозиторий: &lt;a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noopener">https://github.com/conventional-changelog/conventional-changelog&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="список-утилит">Список утилит&lt;/h2>
&lt;h3 id="основные-утилиты-проекта">Основные утилиты проекта&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli" target="_blank" rel="noopener">conventional-changelog-cli&lt;/a> &amp;mdash; утилита командной строки.&lt;/li>
&lt;li>&lt;a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/standard-changelog" target="_blank" rel="noopener">standard-changelog&lt;/a> &amp;mdash; утилита командной строки для формата коммитов &lt;em>angular&lt;/em>.&lt;/li>
&lt;li>conventional-github-releaser &amp;mdash; создание нового релиза на GitHub из метаданных git.&lt;/li>
&lt;li>&lt;a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-recommended-bump" target="_blank" rel="noopener">conventional-recommended-bump&lt;/a> &amp;mdash; узнать на основе коммитов, какая версия рекомендуется.&lt;/li>
&lt;li>&lt;a href="https://github.com/conventional-changelog/conventional-commits-detector" target="_blank" rel="noopener">conventional-commits-detector&lt;/a> &amp;mdash; определить, какое соглашение о коммитах использует репозиторий.&lt;/li>
&lt;li>&lt;a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen&lt;/a> &amp;mdash; утилита, задающая интерфейс к написанию коммитов.&lt;/li>
&lt;li>commitlint &amp;mdash; проверка правильности текста коммита.&lt;/li>
&lt;/ul>
&lt;h3 id="дополнительные-утилиты">Дополнительные утилиты&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/leoforfree/cz-customizable" target="_blank" rel="noopener">cz-customizable&lt;/a> &amp;mdash; плагин для &lt;code>commitizen&lt;/code> для конфигурации формы ввода сообщений.&lt;/li>
&lt;li>&lt;a href="https://github.com/uglow/cz-customizable-ghooks" target="_blank" rel="noopener">cz-customizable-ghooks&lt;/a> &amp;mdash; интеграция &lt;code>cz-customizable&lt;/code> с &lt;code>ghooks&lt;/code> или &lt;code>husky&lt;/code>, чтобы использовать единую конфигурацию для генерации и проверки сообщений коммитов .&lt;/li>
&lt;/ul>
&lt;h2 id="настройка-утилит">Настройка утилит&lt;/h2>
&lt;h3 id="conventional-commits-detector">conventional-commits-detector&lt;/h3>
&lt;p>Определить, какое соглашение о коммитах используется в репозитории.&lt;/p>
&lt;h4 id="установка">Установка&lt;/h4>
&lt;pre>&lt;code class="language-shell">yarn [global] add [--dev] conventional-commits-detector
&lt;/code>&lt;/pre>
&lt;h4 id="использование">Использование&lt;/h4>
&lt;pre>&lt;code class="language-shell">npx conventional-commits-detector
&lt;/code>&lt;/pre>
&lt;p>В результате получим возможный тип коммитов.&lt;/p>
&lt;h3 id="conventional-recommended-bump">conventional-recommended-bump&lt;/h3>
&lt;p>узнать на основе коммитов, какая версия рекомендуется.&lt;/p>
&lt;h4 id="установка">Установка&lt;/h4>
&lt;pre>&lt;code class="language-shell">yarn [global] add [--dev] conventional-recommended-bump
&lt;/code>&lt;/pre>
&lt;h4 id="использование">Использование&lt;/h4>
&lt;pre>&lt;code class="language-shell">npx conventional-recommended-bump -p angular
&lt;/code>&lt;/pre>
&lt;p>Здесь &lt;code>angular&lt;/code> &amp;mdash; название пресета.&lt;/p>
&lt;p>В результате получим уровень, на который изменяется версия.&lt;/p>
&lt;h3 id="standard-changelog">standard-changelog&lt;/h3>
&lt;p>Генерация журнала изменений с использованием соглашений о коммитах &lt;em>angular&lt;/em>.&lt;/p>
&lt;h4 id="установка">Установка&lt;/h4>
&lt;pre>&lt;code class="language-shell">yarn [global] add [--dev] standard-changelog
&lt;/code>&lt;/pre>
&lt;h4 id="использование">Использование&lt;/h4>
&lt;p>Параметры запуска можно посмотреть следующим образом:&lt;/p>
&lt;pre>&lt;code class="language-shell">npx standard-changelog --help
&lt;/code>&lt;/pre>
&lt;p>Генерация файла журнала выполняется следующим образом:&lt;/p>
&lt;pre>&lt;code class="language-shell">npx standard-changelog
&lt;/code>&lt;/pre>
&lt;p>или&lt;/p>
&lt;pre>&lt;code class="language-shell">npx standard-changelog -i CHANGELOG.md -s
&lt;/code>&lt;/pre>
&lt;h3 id="conventional-changelog-cli">conventional-changelog-cli&lt;/h3>
&lt;p>Создаёт журнал изменений из метаданных git (если соглашение о коммитах отлично от &lt;em>angular&lt;/em>).&lt;/p>
&lt;h4 id="установка">Установка&lt;/h4>
&lt;pre>&lt;code class="language-shell">yarn [global] add [--dev] conventional-changelog-cli
&lt;/code>&lt;/pre>
&lt;h4 id="использование">Использование&lt;/h4>
&lt;pre>&lt;code class="language-shell">cd my-project
npx conventional-changelog -p angular -i CHANGELOG.md -s
&lt;/code>&lt;/pre>
&lt;p>Если инструмент используется впервые и нужно учесть все предыдущие журналы изменений, можно выполнить команду:&lt;/p>
&lt;pre>&lt;code class="language-shell">cd my-project
npx conventional-changelog -p angular -i CHANGELOG.md -s -r 0
&lt;/code>&lt;/pre>
&lt;h3 id="commitizen">commitizen&lt;/h3>
&lt;p>Утилита, реализующая интерактивный процесс для генерации коммита.&lt;/p>
&lt;h4 id="установка">Установка&lt;/h4>
&lt;pre>&lt;code class="language-shell">yarn [global] add [--dev] commitizen
&lt;/code>&lt;/pre>
&lt;p>При этом устанавливается скрипт &lt;code>git-cz&lt;/code>, который мы и будем использовать для коммитов.&lt;/p>
&lt;h4 id="использование">Использование&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Сконфигурим формат коммитов. Для этого добавим в файл &lt;code>package.json&lt;/code> команду для формирования коммитов:&lt;/p>
&lt;pre>&lt;code class="language-js">&amp;quot;config&amp;quot;: {
&amp;quot;commitizen&amp;quot;: {
&amp;quot;path&amp;quot;: &amp;quot;cz-conventional-changelog&amp;quot;
}
}
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Выполнение коммитов:&lt;/p>
&lt;pre>&lt;code class="language-shell">git cz
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;h3 id="conventional-github-releaser">conventional-github-releaser&lt;/h3>
&lt;p>Утилита, создающая новый выпуск на GitHub на основе метаданных git.&lt;/p>
&lt;h4 id="установка">Установка&lt;/h4>
&lt;pre>&lt;code class="language-shell">yarn [global] add [--dev] conventional-github-releaser
&lt;/code>&lt;/pre>
&lt;h4 id="использование">Использование&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Создайте новый токен для для доступа к github&lt;/p>
&lt;ul>
&lt;li>Токен создаётся по ссылке &lt;a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener">https://github.com/settings/tokens/new&lt;/a>.&lt;/li>
&lt;li>Права для токена: &lt;code>public_repo&lt;/code> или &lt;code>repo&lt;/code>.&lt;/li>
&lt;li>Обязательно сразу скопируйте свой новый токен личного доступа. Нет возможности получить доступ к его значению ещё раз.&lt;/li>
&lt;li>Установите созданный токен как значение переменной окружения &lt;code>CONVENTIONAL_GITHUB_RELEASER_TOKEN&lt;/code>.&lt;/li>
&lt;li>Также можно указать свой токен аутентификации с помощью флага &lt;code>-t&lt;/code> или &lt;code>--token&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Создание релиза с определённым пресетом:&lt;/p>
&lt;pre>&lt;code class="language-shell">conventional-github-releaser -p angular
&lt;/code>&lt;/pre>
&lt;p>Здесь &lt;code>angular&lt;/code> &amp;mdash; один из пресетов : &lt;code>angular&lt;/code>, &lt;code>atom&lt;/code>, &lt;code>codemirror&lt;/code>, &lt;code>ember&lt;/code>, &lt;code>eslint&lt;/code>, &lt;code>express&lt;/code>, &lt;code>jquery&lt;/code>, &lt;code>jscs&lt;/code>, &lt;code>jshint&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="примерный-рабочий-процесс">Примерный рабочий процесс&lt;/h2>
&lt;ul>
&lt;li>Внести изменения.&lt;/li>
&lt;li>Зафиксировать эти изменения.&lt;/li>
&lt;li>Проверить состояние Travis CI.&lt;/li>
&lt;li>Изменить версию в &lt;code>package.json&lt;/code>.&lt;/li>
&lt;li>Закоммитить файлы: &lt;code>package.json&lt;/code>.&lt;/li>
&lt;li>Задать метку (tag).&lt;/li>
&lt;li>Выложить на удалённый репозиторий (&lt;code>push&lt;/code>).&lt;/li>
&lt;li>Сделать релиз (&lt;code>conventional-github-releaser&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>Причина, по которой вы должны зафиксировать изменения и создать метку после
выполнения &lt;code>standard-changelog&lt;/code> заключается в том, что &lt;code>CHANGELOG.md&lt;/code> должен быть
включён в новую версию.&lt;/p>
&lt;h2 id="backlinks">Backlinks&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://yamadharma.github.io/ru/post/2020/12/11/semantic-versioning/">Семантическое версионирование&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Семантическое версионирование. Semantic-release</title><link>https://yamadharma.github.io/ru/post/2021/01/15/semantic-versioning-semantic-release/</link><pubDate>Fri, 15 Jan 2021 17:33:00 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2021/01/15/semantic-versioning-semantic-release/</guid><description>&lt;details class="toc-inpage d-print-none " open>
&lt;summary class="font-weight-bold">Содержание&lt;/summary>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#backlinks">Backlinks&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#семантическое-версионирование">&lt;a href="https://yamadharma.github.io/ru/post/2020/12/11/semantic-versioning/">Семантическое версионирование&lt;/a>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/details>
&lt;p>&lt;a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="noopener">Fully automated version management and package publishing&lt;/a>&lt;/p>
&lt;h2 id="backlinks">Backlinks&lt;/h2>
&lt;h3 id="семантическое-версионирование">&lt;a href="https://yamadharma.github.io/ru/post/2020/12/11/semantic-versioning/">Семантическое версионирование&lt;/a>&lt;/h3>
&lt;p>Пакет &lt;a href="https://yamadharma.github.io/ru/post/2021/01/15/semantic-versioning-semantic-release/">Semantic-release&lt;/a> автоматизирует весь рабочий процесс выпуска программного пакета.&lt;/p></description></item><item><title>Соглашения о кодировании</title><link>https://yamadharma.github.io/ru/post/2020/12/20/coding-conventions/</link><pubDate>Sun, 20 Dec 2020 16:10:00 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2020/12/20/coding-conventions/</guid><description>&lt;p>Общие положения соглашений о кодировании.&lt;/p>
&lt;details class="toc-inpage d-print-none " open>
&lt;summary class="font-weight-bold">Содержание&lt;/summary>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#цели-правил-кодирования">&lt;span class="section-num">1&lt;/span> Цели правил кодирования&lt;/a>&lt;/li>
&lt;li>&lt;a href="#соглашения-об-именовании">&lt;span class="section-num">2&lt;/span> Соглашения об именовании&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#именование-переменных">&lt;span class="section-num">2.1&lt;/span> Именование переменных&lt;/a>&lt;/li>
&lt;li>&lt;a href="#предикаты">&lt;span class="section-num">2.2&lt;/span> Предикаты&lt;/a>&lt;/li>
&lt;li>&lt;a href="#разное">&lt;span class="section-num">2.3&lt;/span> Разное&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#количество">&lt;span class="section-num">2.3.1&lt;/span> Количество&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#отступы">&lt;span class="section-num">3&lt;/span> Отступы&lt;/a>&lt;/li>
&lt;li>&lt;a href="#комментарии">&lt;span class="section-num">4&lt;/span> Комментарии&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/details>
&lt;h2 id="цели-правил-кодирования">&lt;span class="section-num">1&lt;/span> Цели правил кодирования&lt;/h2>
&lt;ul>
&lt;li>Единый стиль оформления кода во всем проекте.&lt;/li>
&lt;li>Визуальное выделение наиболее значимых частей.&lt;/li>
&lt;/ul>
&lt;h2 id="соглашения-об-именовании">&lt;span class="section-num">2&lt;/span> Соглашения об именовании&lt;/h2>
&lt;h3 id="именование-переменных">&lt;span class="section-num">2.1&lt;/span> Именование переменных&lt;/h3>
&lt;p>Существует несколько популярных соглашений об именования переменных:&lt;/p>
&lt;ul>
&lt;li>Верблюжья нотация (&lt;code>CamelCase&lt;/code>): &lt;code>MyClass&lt;/code>&lt;/li>
&lt;li>Змеиная нотация (&lt;code>snake_case&lt;/code>): &lt;code>my_const&lt;/code>&lt;/li>
&lt;li>Шашлычная нотация (&lt;code>kebab-case&lt;/code>): &lt;code>my-data&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://ru.wikipedia.org/wiki/%D0%92%D0%B5%D0%BD%D0%B3%D0%B5%D1%80%D1%81%D0%BA%D0%B0%D1%8F%5F%D0%BD%D0%BE%D1%82%D0%B0%D1%86%D0%B8%D1%8F" target="_blank" rel="noopener">Венгерская нотация&lt;/a> - соглашение об именовании идентификаторов (переменных и функций), которое сводится к кодированию типов данных прямо в название: &lt;code>userArray&lt;/code>.&lt;/li>
&lt;li>Нотация Cobol: &lt;code>COBOL-CASE&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="предикаты">&lt;span class="section-num">2.2&lt;/span> Предикаты&lt;/h3>
&lt;p>Предикат - это функция-проверка, она всегда возвращает либо &lt;code>true&lt;/code>, либо &lt;code>false&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>Предваряются префиксом &lt;code>is&lt;/code>: &lt;code>isEmpty()&lt;/code>.&lt;/li>
&lt;li>Если предикат отвечает на вопрос &lt;em>есть ли?&lt;/em> (например, &lt;em>есть ли в списке чисел нечётное число?&lt;/em>), принято использовать слово &lt;code>has&lt;/code>: &lt;code>hasChildren()&lt;/code>.&lt;/li>
&lt;li>Используется знак &lt;code>?&lt;/code> в конце слова (lisp, ruby): &lt;code>empty?&lt;/code>.&lt;/li>
&lt;li>Используется буква &lt;code>p&lt;/code> в конце слова (emacs lisp): &lt;code>empty-p&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="разное">&lt;span class="section-num">2.3&lt;/span> Разное&lt;/h3>
&lt;h4 id="количество">&lt;span class="section-num">2.3.1&lt;/span> Количество&lt;/h4>
&lt;p>Если нужна переменная, в которой содержится количество чего-либо, используется комбинация: сущность во множественном числе + &lt;code>count&lt;/code>: &lt;code>symbolsCount&lt;/code>.&lt;/p>
&lt;h2 id="отступы">&lt;span class="section-num">3&lt;/span> Отступы&lt;/h2>
&lt;ul>
&lt;li>Во многих стандартах кодирования запрещается использовать табуляции - их требуют заменять пробелами.&lt;/li>
&lt;li>В различных редакторах может устанавливаться разная длина символа табуляции, поэтому при смешении табуляции с пробелами исходный код будет выглядеть по-разному в разных редакторах.&lt;/li>
&lt;/ul>
&lt;h2 id="комментарии">&lt;span class="section-num">4&lt;/span> Комментарии&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Комментарий - некомпилируемая часть исходного кода, поясняющая принцип работы программы.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Иногда в комментариях фиксируют информацию:&lt;/p>
&lt;ul>
&lt;li>о версии кода и, внесенных в ней, изменениях;&lt;/li>
&lt;li>об авторе кода или конкретных правок;&lt;/li>
&lt;li>о лицензии, по которой распространяется код;&lt;/li>
&lt;li>о неисправленных ошибках и прочих недочетах, заметки разного рода.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Комментарии должны быть коггерентны коду. При изменении кода надо менять комментарии.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Комментарии не должны пояснять очевидные моменты.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Комментарии должны быть понятны всем, а не только тем, кто их пишет.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Комментарии не должны содержать бесполезной информации.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Написание комментариев и поддержка единого стиля комментариев не должна отнимать слишком много времени.&lt;/p>
&lt;p>Использование современных инструментов разработки позволяют полностью исключить некоторые типы комментариев из программы:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>информацию о версии программы, авторе изменений и ее особенностях позволяют хранить системы управления версиями;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>комментарии TODO, BUG и FIXME могут быть перенесены в трекеры задач и ошибок.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Соглашение о кодировании. Emacs lisp</title><link>https://yamadharma.github.io/ru/post/2020/12/20/elisp-coding-conventions/</link><pubDate>Sun, 20 Dec 2020 15:51:00 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2020/12/20/elisp-coding-conventions/</guid><description>&lt;p>Соглашения о кодировании для elisp.&lt;/p>
&lt;details class="toc-inpage d-print-none " open>
&lt;summary class="font-weight-bold">Содержание&lt;/summary>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#соглашение-об-именовании">Соглашение об именовании&lt;/a>&lt;/li>
&lt;li>&lt;a href="#внешние-ссылки">Внешние ссылки&lt;/a>&lt;/li>
&lt;li>&lt;a href="#backlinks">Backlinks&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#emacs">&lt;a href="https://yamadharma.github.io/ru/post/2020/12/24/emacs/">Emacs&lt;/a>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/details>
&lt;h2 id="соглашение-об-именовании">Соглашение об именовании&lt;/h2>
&lt;p>В соглашениях об именовании emacs lisp следует обычным правилам именования (см. &lt;a href="https://yamadharma.github.io/ru/post/2020/12/20/coding-conventions/">Соглашения о кодировании&lt;/a>).&lt;/p>
&lt;ul>
&lt;li>В названиях функций используются только дефисы (например, &lt;code>package-prefix-function-name&lt;/code>).&lt;/li>
&lt;li>Косая черта используется для разделения имени пакета и функции (например, &lt;code>package-prefix/function-name&lt;/code>), является популярным нестандартным соглашением.&lt;/li>
&lt;li>Обычно имена предикатных функций заканчиваются на &lt;code>-p&lt;/code>.&lt;/li>
&lt;li>Имена предикатных функций могут заканчиваться на &lt;code>?&lt;/code> (как в Scheme, Racket Lisp, ruby, clojure) вместо &lt;code>p&lt;/code>. Поскольку вопросительный знак более интуитивно понятен, его легче идентифицировать и его можно синтаксически проверить&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/li>
&lt;li>Двойное тире для внутренних методов (вспомогательных функций) является неявным соглашением.&lt;/li>
&lt;li>Переменная, начинающаяся с подчёркивания &lt;code>_&lt;/code> - неиспользуемая переменная&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> (неявное соглашение).&lt;/li>
&lt;li>Соглашение GNU emacs об использовании &lt;code>ALLCAPS&lt;/code> для параметров.&lt;/li>
&lt;/ul>
&lt;h2 id="внешние-ссылки">Внешние ссылки&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/bbatsov/emacs-lisp-style-guide" target="_blank" rel="noopener">A community-driven Emacs Lisp style guide&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="backlinks">Backlinks&lt;/h2>
&lt;h3 id="emacs">&lt;a href="https://yamadharma.github.io/ru/post/2020/12/24/emacs/">Emacs&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://yamadharma.github.io/ru/post/2020/12/20/elisp-coding-conventions/">Соглашение о кодировании. Emacs lisp&lt;/a>&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;code>p&lt;/code> нельзя, потому что не все функции, заканчивающиеся на &lt;code>p&lt;/code>, являются предикатом.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Это пришло из современных практик на других языках (я думаю, python ruby).&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Общепринятые коммиты</title><link>https://yamadharma.github.io/ru/post/2020/12/11/conventional-commits/</link><pubDate>Fri, 11 Dec 2020 19:39:00 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2020/12/11/conventional-commits/</guid><description>&lt;p>Использование спецификации &lt;em>Conventional Commits&lt;/em>.&lt;/p>
&lt;details class="toc-inpage d-print-none " open>
&lt;summary class="font-weight-bold">Содержание&lt;/summary>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#описание">Описание&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#структура-коммита">Структура коммита&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#базовые-типы-коммитов">Базовые типы коммитов&lt;/a>&lt;/li>
&lt;li>&lt;a href="#соглашения-the-angular-convention">Соглашения The Angular convention&lt;/a>&lt;/li>
&lt;li>&lt;a href="#соглашения-commitlint-config-conventional">Соглашения @commitlint/config-conventional&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#программное-обеспечение">Программное обеспечение&lt;/a>&lt;/li>
&lt;li>&lt;a href="#backlinks">Backlinks&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#система-контроля-версий-git">&lt;a href="https://yamadharma.github.io/ru/post/2020/12/07/git-cvs/">Система контроля версий git&lt;/a>&lt;/a>&lt;/li>
&lt;li>&lt;a href="#семантическое-версионирование">&lt;a href="https://yamadharma.github.io/ru/post/2020/12/11/semantic-versioning/">Семантическое версионирование&lt;/a>&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/details>
&lt;h2 id="описание">Описание&lt;/h2>
&lt;p>Спецификация &lt;a href="https://www.conventionalcommits.org/ru/" target="_blank" rel="noopener">Conventional Commits&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>Соглашение о том, как нужно писать сообщения commit&amp;rsquo;ов.&lt;/li>
&lt;li>Совместимо с &lt;a href="http://semver.org/" target="_blank" rel="noopener">SemVer&lt;/a> (см. &lt;a href="https://yamadharma.github.io/ru/post/2020/12/11/semantic-versioning/">Семантическое версионирование&lt;/a>). Даже вернее сказать, сильно связано с семантическим версионированием.&lt;/li>
&lt;li>Регламентирует структуру и основные типы коммитов.&lt;/li>
&lt;/ul>
&lt;h3 id="структура-коммита">Структура коммита&lt;/h3>
&lt;pre>&lt;code class="language-text">&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;
&amp;lt;BLANK LINE&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;BLANK LINE&amp;gt;
&amp;lt;footer&amp;gt;
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Заголовок является обязательным.&lt;/li>
&lt;li>Любая строка сообщения о фиксации не может быть длиннее 100 символов.&lt;/li>
&lt;li>Тема (subject) содержит краткое описание изменения.
&lt;ul>
&lt;li>Используйте повелительное наклонение в настоящем времени: «изменить» (&amp;ldquo;change&amp;rdquo; not &amp;ldquo;changed&amp;rdquo; nor &amp;ldquo;changes&amp;rdquo;).&lt;/li>
&lt;li>Не используйте заглавную первую букву.&lt;/li>
&lt;li>Не ставьте точку в конце.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Тело (body) должно включать мотивацию к изменению и противопоставлять это предыдущему поведению.
&lt;ul>
&lt;li>Как и в теме, используйте повелительное наклонение в настоящем времени.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Нижний колонтитул (footer) должен содержать любую информацию о критических изменениях.
&lt;ul>
&lt;li>Также содержит ссылку на issue (например, на github), который закрывает эта фиксация.&lt;/li>
&lt;li>Критические изменения должны начинаться со слова &lt;code>BREAKING CHANGE:&lt;/code> с пробела или двух символов новой строки. Затем для этого используется остальная часть сообщения фиксации.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="базовые-типы-коммитов">Базовые типы коммитов&lt;/h4>
&lt;ul>
&lt;li>&lt;code>fix:&lt;/code> &amp;mdash; коммит типа fix исправляет ошибку (bug) в вашем коде (он соответствует PATCH в SemVer).&lt;/li>
&lt;li>&lt;code>feat:&lt;/code> &amp;mdash; коммит типа feat добавляет новую функцию (feature) в ваш код (он соответствует MINOR в SemVer).&lt;/li>
&lt;li>&lt;code>BREAKING CHANGE:&lt;/code> &amp;mdash; коммит, который содержит текст &lt;code>BREAKING CHANGE:&lt;/code> в начале своего не обязательного тела сообщения (body) или в
подвале (footer), добавляет изменения, нарушающие обратную
совместимость вашего API (он соответствует MAJOR в SemVer). BREAKING CHANGE может быть частью коммита любого типа.&lt;/li>
&lt;li>&lt;code>revert:&lt;/code> &amp;mdash; если фиксация отменяет предыдущую фиксацию. Начинается с &lt;code>revert:&lt;/code>, за которым следует заголовок отменённой фиксации. В теле должно быть написано: Это отменяет фиксацию &lt;code>&amp;lt;hash&amp;gt;&lt;/code> (это SHA-хэш отменяемой фиксации).&lt;/li>
&lt;li>Другое: коммиты с типами, которые отличаются от &lt;code>fix:&lt;/code> и &lt;code>feat:&lt;/code>,
также разрешены. Например, @commitlint/config-conventional
(основанный на The Angular convention) рекомендует: chore:, docs:,
style:, refactor:, perf:, test:, и другие.&lt;/li>
&lt;/ul>
&lt;h4 id="соглашения-the-angular-convention">Соглашения The Angular convention&lt;/h4>
&lt;p>Одно из популярных соглашений о поддержке исходных кодов &amp;mdash; конвенция Angular (&lt;a href="https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines" target="_blank" rel="noopener">The Angular convention&lt;/a>).&lt;/p>
&lt;!--list-separator-->
&lt;ul>
&lt;li>
&lt;p>Типы коммитов The Angular convention&lt;/p>
&lt;p>Конвенция Angular (&lt;a href="https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines" target="_blank" rel="noopener">The Angular convention&lt;/a>) требует следующие типы коммитов:&lt;/p>
&lt;ul>
&lt;li>&lt;code>build:&lt;/code> &amp;mdash; изменения, влияющие на систему сборки или внешние зависимости (примеры областей (scope): gulp, broccoli, npm).&lt;/li>
&lt;li>&lt;code>ci:&lt;/code> &amp;mdash; изменения в файлах конфигурации и скриптах CI (примеры областей: Travis, Circle, BrowserStack, SauceLabs).&lt;/li>
&lt;li>&lt;code>docs:&lt;/code> &amp;mdash; изменения только в документации.&lt;/li>
&lt;li>&lt;code>feat:&lt;/code> &amp;mdash; новая функция.&lt;/li>
&lt;li>&lt;code>fix:&lt;/code> &amp;mdash; исправление ошибок.&lt;/li>
&lt;li>&lt;code>perf:&lt;/code> &amp;mdash; изменение кода, улучшающее производительность.&lt;/li>
&lt;li>&lt;code>refactor:&lt;/code> &amp;mdash; Изменение кода, которое не исправляет ошибку и не добавляет функции (рефакторинг кода).&lt;/li>
&lt;li>&lt;code>style:&lt;/code> &amp;mdash; изменения, не влияющие на смысл кода (пробелы, форматирование, отсутствие точек с запятой и т. д.).&lt;/li>
&lt;li>&lt;code>test:&lt;/code> &amp;mdash; добавление недостающих тестов или исправление существующих тестов.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!--list-separator-->
&lt;ul>
&lt;li>
&lt;p>Области действия (scope)&lt;/p>
&lt;p>Областью действия должно быть имя затронутого пакета npm (как его воспринимает человек, читающий журнал изменений, созданный из сообщений фиксации).&lt;/p>
&lt;p>Есть несколько исключений из правила «использовать имя пакета»:&lt;/p>
&lt;ul>
&lt;li>&lt;code>packaging&lt;/code> &amp;mdash; используется для изменений, которые изменяют структуру пакета, например, изменения общедоступного пути.&lt;/li>
&lt;li>&lt;code>changelog&lt;/code> &amp;mdash; используется для обновления примечаний к выпуску в CHANGELOG.md.&lt;/li>
&lt;li>отсутствует область действия &amp;mdash; полезно для изменений стиля, тестирования и рефакторинга, которые выполняются во всех пакетах (например, style: добавить отсутствующие точки с запятой).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="соглашения-commitlint-config-conventional">Соглашения @commitlint/config-conventional&lt;/h4>
&lt;p>Соглашение &lt;a href="https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional" target="_blank" rel="noopener">@commitlint/config-conventional&lt;/a> входит в пакет &lt;a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noopener">Conventional Changelog&lt;/a>. В целом в этом соглашении придерживаются соглашения Angular.&lt;/p>
&lt;h2 id="программное-обеспечение">Программное обеспечение&lt;/h2>
&lt;h2 id="backlinks">Backlinks&lt;/h2>
&lt;h3 id="система-контроля-версий-git">&lt;a href="https://yamadharma.github.io/ru/post/2020/12/07/git-cvs/">Система контроля версий git&lt;/a>&lt;/h3>
&lt;p>&lt;a href="https://yamadharma.github.io/ru/post/2020/12/11/conventional-commits/">Общепринятые коммиты&lt;/a>&lt;/p>
&lt;h3 id="семантическое-версионирование">&lt;a href="https://yamadharma.github.io/ru/post/2020/12/11/semantic-versioning/">Семантическое версионирование&lt;/a>&lt;/h3>
&lt;p>Для реализации семантического версионирования создано несколько программных продуктов. При этом лучше всего использовать комплексные продукты, которые используют информацию из коммитов системы версионирования. Естественно, коммиты должны иметь стандартизованный вид. Поэтому в семантическое версионирование применяется вместе с &lt;a href="https://yamadharma.github.io/ru/post/2020/12/11/conventional-commits/">Общепринятыми коммитами&lt;/a>.&lt;/p></description></item><item><title>Семантическое версионирование</title><link>https://yamadharma.github.io/ru/post/2020/12/11/semantic-versioning/</link><pubDate>Fri, 11 Dec 2020 19:17:00 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2020/12/11/semantic-versioning/</guid><description>&lt;p>Семантический подход в версионированию программного обеспечения.&lt;/p>
&lt;details class="toc-inpage d-print-none " open>
&lt;summary class="font-weight-bold">Содержание&lt;/summary>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#краткое-описание-семантического-версионирования">&lt;span class="section-num">1&lt;/span> Краткое описание семантического версионирования&lt;/a>&lt;/li>
&lt;li>&lt;a href="#программное-обеспечение">&lt;span class="section-num">2&lt;/span> Программное обеспечение&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#пакет-semantic-release">&lt;span class="section-num">2.1&lt;/span> Пакет Semantic-release&lt;/a>&lt;/li>
&lt;li>&lt;a href="#пакет-conventional-changelog">&lt;span class="section-num">2.2&lt;/span> Пакет Conventional Changelog&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#backlinks">&lt;span class="section-num">3&lt;/span> Backlinks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/details>
&lt;h2 id="краткое-описание-семантического-версионирования">&lt;span class="section-num">1&lt;/span> Краткое описание семантического версионирования&lt;/h2>
&lt;p>Семантическое версионирование описывается в &lt;a href="https://semver.org/lang/ru/" target="_blank" rel="noopener">манифесте семантического версионирования&lt;/a>.&lt;/p>
&lt;p>Кратко его можно описать следующим образом:&lt;/p>
&lt;ul>
&lt;li>Версия задаётся в виде кортежа &lt;code>МАЖОРНАЯ_ВЕРСИЯ.МИНОРНАЯ_ВЕРСИЯ.ПАТЧ&lt;/code>.&lt;/li>
&lt;li>Номер версии следует увеличивать:
&lt;ul>
&lt;li>МАЖОРНУЮ версию, когда сделаны обратно несовместимые изменения API.&lt;/li>
&lt;li>МИНОРНУЮ версию, когда вы добавляете новую функциональность, не нарушая обратной совместимости.&lt;/li>
&lt;li>ПАТЧ-версию, когда вы делаете обратно совместимые исправления.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Дополнительные обозначения для предрелизных и билд-метаданных
возможны как дополнения к МАЖОРНАЯ.МИНОРНАЯ.ПАТЧ формату.&lt;/li>
&lt;/ul>
&lt;h2 id="программное-обеспечение">&lt;span class="section-num">2&lt;/span> Программное обеспечение&lt;/h2>
&lt;p>Для реализации семантического версионирования создано несколько
программных продуктов. При этом лучше всего использовать комплексные
продукты, которые используют информацию из коммитов системы
версионирования. Естественно, коммиты должны иметь стандартизованный
вид. Поэтому в семантическое версионирование применяется вместе с &lt;em>общепринятыми коммитами&lt;/em> (см. &lt;a href="https://yamadharma.github.io/ru/post/2020/12/11/conventional-commits/">Общепринятые коммиты&lt;/a>).&lt;/p>
&lt;h3 id="пакет-semantic-release">&lt;span class="section-num">2.1&lt;/span> Пакет Semantic-release&lt;/h3>
&lt;p>Пакет &lt;a href="https://yamadharma.github.io/ru/post/2021/01/15/semantic-versioning-semantic-release/">Semantic-release&lt;/a>
автоматизирует весь рабочий процесс выпуска программного пакета.&lt;/p>
&lt;h3 id="пакет-conventional-changelog">&lt;span class="section-num">2.2&lt;/span> Пакет Conventional Changelog&lt;/h3>
&lt;p>Пакет &lt;a href="https://yamadharma.github.io/ru/post/2021/01/16/semantic-versioning-conventional-changelog/">Conventional Changelog&lt;/a> является комплексным решением по управлению коммитами и генерации журнала изменений.
Он содержит набор утилит, которые можно использовать по-отдельности.&lt;/p>
&lt;h2 id="backlinks">&lt;span class="section-num">3&lt;/span> Backlinks&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://yamadharma.github.io/ru/post/2020/12/07/git-cvs/">Система контроля версий git&lt;/a>&lt;/li>
&lt;/ul>
&lt;!--listend-->
&lt;ul>
&lt;li>&lt;a href="https://yamadharma.github.io/ru/post/2020/12/11/conventional-commits/">Общепринятые коммиты&lt;/a>&lt;/li>
&lt;/ul>
&lt;!--listend-->
&lt;ul>
&lt;li>&lt;a href="https://yamadharma.github.io/ru/post/2021/01/17/git-practical-use-case/">Практический сценарий использования git&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Языки научного программирования</title><link>https://yamadharma.github.io/ru/post/2020/10/30/scientific-programming-languages/</link><pubDate>Fri, 30 Oct 2020 19:05:00 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2020/10/30/scientific-programming-languages/</guid><description>&lt;p>Специфика языков программирования для научно-инженерных расчётов.&lt;/p>
&lt;details class="toc-inpage d-print-none " open>
&lt;summary class="font-weight-bold">Содержание&lt;/summary>
&lt;nav id="TableOfContents">
&lt;ul>
&lt;li>&lt;a href="#список-языков-научного-программирования">Список языков научного программирования&lt;/a>&lt;/li>
&lt;/ul>
&lt;/nav>
&lt;/details>
&lt;h2 id="список-языков-научного-программирования">Список языков научного программирования&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://yamadharma.github.io/ru/post/2021/08/26/octave-programming-language/">Язык программирования Octave&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yamadharma.github.io/ru/post/2022/01/21/julia-programming-language/">Язык программирования Julia&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Деинсталляция WebFM из Drupal</title><link>https://yamadharma.github.io/ru/post/2018/05/17/webfm-uninstall/</link><pubDate>Thu, 17 May 2018 08:43:05 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2018/05/17/webfm-uninstall/</guid><description>&lt;h2 id="circumstantia">Circumstantia&lt;/h2>
&lt;h3 id="дано">Дано&lt;/h3>
&lt;p>Сайт на &lt;a href="https://www.drupal.org" target="_blank" rel="noopener">Drupal&lt;/a> 5.&lt;/p>
&lt;h3 id="требуется">Требуется&lt;/h3>
&lt;p>Превести сайт на Drupal 8.&lt;/p>
&lt;h3 id="предварительный-план-действий">Предварительный план действий&lt;/h3>
&lt;p>Drupal 5 -&amp;gt; Drupal 6 -&amp;gt; Drupal 8.&lt;/p>
&lt;h3 id="проблема">Проблема&lt;/h3>
&lt;p>В системе установлен пакет &lt;a href="https://www.drupal.org/project/webfm" target="_blank" rel="noopener">webfm&lt;/a>, который не поддерживается после Drupal 6. Webfm ведёт свою базу файлов, и в тексте сайта ставит указание не на файл, на а запись в своей базе данных.&lt;/p>
&lt;h2 id="solutio">Solutio&lt;/h2>
&lt;p>При поиски решения проблемы были найдены следующие сайты:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://puna.upf.edu/node/97" target="_blank" rel="noopener">http://puna.upf.edu/node/97&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gist.github.com/heidar/3707913" target="_blank" rel="noopener">https://gist.github.com/heidar/3707913&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Основываясь на них, набросал скипт &lt;code>webfm-fix&lt;/code>.&lt;/p>
&lt;pre>&lt;code class="language-python">#!/usr/bin/python2
import MySQLdb
# For REALY work set update = True
update = False
# connect to the databases
db = MySQLdb.connect(
host=&amp;quot;localhost&amp;quot;, # your host, usually localhost
user=&amp;quot;username&amp;quot;, # your username
passwd=&amp;quot;userpassword&amp;quot;, # your password
db=&amp;quot;database&amp;quot;, # name of the data base
use_unicode=True, charset='utf8')
cur = db.cursor()
# get all the file ids and paths from the old webfm table
filename_query = &amp;quot;SELECT fid, fpath FROM webfm_file&amp;quot;
cur.execute(filename_query)
fid_max = 0
filenames = {}
for row in cur.fetchall():
filenames[row[0]] = row[1]
if fid_max &amp;lt; row[0]:
fid_max = row[0]
# find all webfm links and replace them with the actual file path
query = &amp;quot;SELECT nid, body, teaser FROM node_revisions WHERE body like '%webfm_send%' OR teaser like '%webfm_send%'&amp;quot;
cur.execute(query)
for row in cur.fetchall():
entity_id = row[0]
body = row[1]
teaser = row[2]
for i in range(fid_max, 0, -1):
webfm1 = u'ru/webfm_send/' + str(i)
webfm2 = u'webfm_send/' + str(i)
webfm_list = [webfm1, webfm2]
for webfm in webfm_list:
if i in filenames:
sql_body = &amp;quot;UPDATE node_revisions SET body = REPLACE(body,'%s','%s') WHERE nid = %d&amp;quot; % (webfm,filenames[i],entity_id)
sql_teaser = &amp;quot;UPDATE node_revisions SET teaser = REPLACE(teaser,'%s','%s') WHERE nid = %d&amp;quot; % (webfm,filenames[i],entity_id)
if update:
try:
# Execute the SQL command
cur.execute(sql_body)
cur.execute(sql_teaser)
# Commit your changes in the database
db.commit()
except:
# Rollback in case there is any error
db.rollback()
db.close()
&lt;/code>&lt;/pre>
&lt;p>При написании скрипта использовал следующую информацию:
&lt;a href="https://drupal.stackexchange.com/questions/6787/where-does-drupal-store-the-content-of-a-nodes-body" target="_blank" rel="noopener">Where does Drupal store the content of a node&amp;rsquo;s body?&lt;/a>&lt;/p>
&lt;p>In Drupal 6, content of the node&amp;rsquo;s body is saved in &lt;code>node_revisions&lt;/code> table under &lt;code>body&lt;/code> field.&lt;/p>
&lt;pre>&lt;code class="language-bash">node_revisions.body
&lt;/code>&lt;/pre>
&lt;p>In Drupal 7, content of the node&amp;rsquo;s body is saved in &lt;code>field_data_body&lt;/code> table under &lt;code>body_value&lt;/code> field. In case content revisions are there then it also saves the data in &lt;code>field_revision_body&lt;/code> table under &lt;code>body_value&lt;/code> field.&lt;/p>
&lt;pre>&lt;code class="language-bash">field_data_body.body_value
field_revision_body.body_value
&lt;/code>&lt;/pre>
&lt;p>In Drupal 8, content of the node&amp;rsquo;s body is saved in &lt;code>node__body&lt;/code> table under &lt;code>body_value&lt;/code> field. In case content revisions are there then it also saves the data in &lt;code>node_revision__body&lt;/code> table under &lt;code>body_value&lt;/code> field.&lt;/p>
&lt;pre>&lt;code class="language-bash">node__body.body_value
node_revision__body.body_value
&lt;/code>&lt;/pre></description></item><item><title>Миграция с livejournal на hexo</title><link>https://yamadharma.github.io/ru/post/2018/04/21/from-lj-to-hexo/</link><pubDate>Sat, 21 Apr 2018 15:37:34 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2018/04/21/from-lj-to-hexo/</guid><description>&lt;p>Миграция с &lt;a href="https://yamadharma.livejournal.com/" target="_blank" rel="noopener">livejornal&lt;/a> составила некоторые проблемы.&lt;/p>
&lt;p>Хочу заметить, что комментарии я не переносил.&lt;/p>
&lt;p>Наиболее подходящим показался мне &lt;a href="https://github.com/arty-name/livejournal-export" target="_blank" rel="noopener">livejournal-export&lt;/a>. Он переводит сразу в &lt;em>markdown&lt;/em>. Однако, при этом не импортируются теги.
Для идентификации использует параметры сессии броузера.&lt;/p>
&lt;p>Вторым вариантом я рассмотрел &lt;a href="https://github.com/ghewgill/ljdump" target="_blank" rel="noopener">ljdump&lt;/a>. Он скачивает журнал в &lt;em>html&lt;/em>. Для идентификации использует логин и пароль.&lt;/p>
&lt;p>Потом пришлось преобразовать в &lt;em>markdown&lt;/em>. Для этого написал скрипт &lt;em>xml2md&lt;/em>.&lt;/p>
&lt;pre>&lt;code class="language-python">##!/usr/bin/python3
## -*- coding: utf-8 -*-
import os
import sys
from lxml import etree
import html2text
from datetime import datetime
from transliterate import translit, get_available_language_codes
outdir = 'markdown'
os.makedirs(outdir, exist_ok=True)
infile = sys.argv[1]
print(infile)
tree = etree.parse(infile)
post = tree.getroot()
postTitle = ''
postTags = ''
for elem in post.getchildren():
if not elem.text:
text = &amp;quot;None&amp;quot;
else:
text = elem.text
## print(elem.tag + &amp;quot; =&amp;gt; &amp;quot; + text)
## book_dict[elem.tag] = text
if elem.tag == 'subject':
postTitle = text
if elem.tag == 'eventtime':
postDate = text
if elem.tag == 'event':
postContent = text
if elem.tag == 'props':
for propsElem in elem.getchildren():
if not elem.text:
text = &amp;quot;None&amp;quot;
else:
text = propsElem.text
## print(propsElem.tag + &amp;quot; =&amp;gt; &amp;quot; + text)
if propsElem.tag == 'taglist':
postTags = text
postHeader = 'layout: post\n'+'title: '+postTitle+'\n'+'date: '+str(postDate)
postHeader = postHeader+'\ncategories: blog\nlang: ru'
postHeader = postHeader+'\ntags: ['+postTags+']'
postHeader = postHeader+'\n'+'---'
h = html2text.HTML2Text()
h.ignore_links = False
h.body_width = 0
h.unicode_snob = True
postContent = h.handle(postContent)
fullPost = postHeader+'\n\n\n'+postContent
date = datetime.strptime(postDate, '%Y-%m-%d %H:%M:%S')
outFile = '{0.year}-{0.month:02d}-{0.day:02d}'.format(date)
if postTitle != '':
translitTitle = translit(postTitle, 'ru', reversed=True)
translitTitle = translitTitle.replace(&amp;quot; &amp;quot;,&amp;quot;_&amp;quot;)
translitTitle = translitTitle.replace(&amp;quot;:&amp;quot;,&amp;quot;&amp;quot;)
translitTitle = translitTitle.replace(&amp;quot;'&amp;quot;,&amp;quot;&amp;quot;)
translitTitle = translitTitle.replace(&amp;quot;«&amp;quot;,&amp;quot;&amp;quot;)
translitTitle = translitTitle.replace(&amp;quot;»&amp;quot;,&amp;quot;&amp;quot;)
translitTitle = translitTitle.replace(&amp;quot;;&amp;quot;,&amp;quot;&amp;quot;)
else:
translitTitle = '{0.hour:02d}-{0.minute:02d}-{0.second:02d}'.format(date)
outFile = outFile+'-'+translitTitle
f = open(outdir+'/'+str(outFile)+'.md', 'w')
f.write(fullPost)
f.close()
&lt;/code>&lt;/pre>
&lt;p>Преобразование можно выполнить с помощью команды:&lt;/p>
&lt;pre>&lt;code class="language-bash">./xml2md &amp;lt;file&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>При этом создаётся каталог &lt;em>markdown&lt;/em> и в него помещается результат конвертации.&lt;/p></description></item><item><title>Установка темы NexT для hexo</title><link>https://yamadharma.github.io/ru/post/2018/04/04/hexo-theme-next/</link><pubDate>Wed, 04 Apr 2018 13:24:22 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2018/04/04/hexo-theme-next/</guid><description>&lt;p>Пробую поменять тему оформления блога на &lt;a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT&lt;/a>.&lt;/p>
&lt;p>Также можно посмотреть документацию:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/ru/README.md" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next/blob/master/docs/ru/README.md&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/iissnan/hexo-theme-next/blob/master/README.md" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next/blob/master/README.md&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="скачиваем-тему">Скачиваем тему&lt;/h2>
&lt;p>Переходим в каталог блога и скачиваем.&lt;/p>
&lt;pre>&lt;code class="language-bash">git clone https://github.com/theme-next/hexo-theme-next themes/next
&lt;/code>&lt;/pre>
&lt;h2 id="конфигурационный-файл">Конфигурационный файл&lt;/h2>
&lt;pre>&lt;code class="language-bash">mkdir -p source/_data
cd source/_data
touch next.yml
&lt;/code>&lt;/pre>
&lt;p>Убедимся, что в файле &lt;code>themes/next/_config.yml&lt;/code> установлено:&lt;/p>
&lt;pre>&lt;code class="language-yaml">override: false
&lt;/code>&lt;/pre>
&lt;p>В корневом файле &lt;code>_config.yml&lt;/code> устанавливаем:&lt;/p>
&lt;pre>&lt;code class="language-yaml">theme: next
&lt;/code>&lt;/pre>
&lt;p>и&lt;/p>
&lt;pre>&lt;code class="language-yaml">source_dir: source
&lt;/code>&lt;/pre>
&lt;p>В файл &lt;code>source/_data/next.yml&lt;/code> переносим из &lt;code>themes/next/_config.yml&lt;/code>
параметры, которые меняем.&lt;/p>
&lt;h2 id="страницы-категорий-и-тегов">Страницы категорий и тегов&lt;/h2>
&lt;p>Создадим страницы &lt;code>tags&lt;/code> и &lt;code>categories&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-bash">hexo new page &amp;quot;tags&amp;quot;
hexo new page &amp;quot;categories&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Отредактирем файлы &lt;code>source/tags/index.md&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-markdown">---
title: tags
date: &amp;quot;2018-04-04T14:41:32+00:00&amp;quot;
type: &amp;quot;tags&amp;quot;
---
&lt;/code>&lt;/pre>
&lt;p>и &lt;code>source/categories/index.md&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-markdown">---
title: categories
date: &amp;quot;2018-04-04T14:41:37+00:00&amp;quot;
type: &amp;quot;categories&amp;quot;
---
&lt;/code>&lt;/pre>
&lt;p>Добавим описание меню в файл &lt;code>source/_data/next.yml&lt;/code>:&lt;/p>
&lt;pre>&lt;code class="language-yaml">menu:
home: / || home
tags: /tags/ || tags
categories: /categories/ || th
archives: /archives/ || archive
&lt;/code>&lt;/pre>
&lt;h2 id="личная-фотография">Личная фотография&lt;/h2>
&lt;p>Сделаем каталог для изображений:&lt;/p>
&lt;pre>&lt;code class="language-bash">mkdir -p source/images
&lt;/code>&lt;/pre>
&lt;p>Поместим туда файл (например, &lt;code>avatar.jpg&lt;/code>) и запишем в конфиг
&lt;code>source/_data/next.yml&lt;/code>:&lt;/p>
&lt;pre>&lt;code class="language-yaml">avatar: /images/avatar.jpg
&lt;/code>&lt;/pre>
&lt;p>Я сделал ширину 126px.&lt;/p>
&lt;h3 id="комментарии">Комментарии&lt;/h3>
&lt;p>Комментарии настроил через Disqus.
Для этого сконфигурил на &lt;a href="http://www.disqus.com" target="_blank" rel="noopener">Disqus&lt;/a> сайт с коротким именем &lt;em>yamadharma-blog&lt;/em>.
Добавил в файл &lt;code>source/_data/next.yml&lt;/code>:&lt;/p>
&lt;pre>&lt;code class="language-yaml">disqus:
enable: true
shortname: yamadharma-blog
count: true
lazyload: false
&lt;/code>&lt;/pre></description></item><item><title>Переход блога на hexo</title><link>https://yamadharma.github.io/ru/post/2018/03/28/hexo/</link><pubDate>Wed, 28 Mar 2018 13:10:47 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2018/03/28/hexo/</guid><description>&lt;p>Блог на &lt;a href="https://jekyllrb.com/" target="_blank" rel="noopener">Jekyll&lt;/a> вести не получилось. Попробовал перейти на &lt;a href="https://hexo.io" target="_blank" rel="noopener">Hexo&lt;/a>. Он
попроще, но зато всё, что нужно, работает сразу.&lt;/p>
&lt;h2 id="установка-hexo">Установка Hexo&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Установил Hexo (глобально):&lt;/p>
&lt;pre>&lt;code>npm install -g hexo-cli
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Инициализировал каталог блога:&lt;/p>
&lt;pre>&lt;code>hexo init .
npm install
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Установил плагин для выкладывания на git (это делается в каталоге блога):&lt;/p>
&lt;pre>&lt;code>npm install hexo-deployer-git --save
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Установил плагин для генерации RSS (такая опция есть в теме):&lt;/p>
&lt;pre>&lt;code>npm install hexo-generator-feed --save
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Задал конфигурацию &lt;code>_config.yml&lt;/code>:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-yaml"># Site
title: В борьбе обретёшь ты право своё
subtitle: Делай, что должен, и будь, что будет
description:
keywords:
author: Дмитрий Кулябов
language: ru
timezone:
# URL
# If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'
url: https://yamadharma.bitbucket.io/
root: /
permalink: :lang/:year/:month/:day/:title/
permalink_defaults:
lang: ru
# Directory
source_dir: source
public_dir: public
tag_dir: tags
archive_dir: archives
category_dir: categories
code_dir: downloads/code
i18n_dir: :lang
skip_render:
# Writing
new_post_name: :lang/:year-:month-:day-:title.md # File name of new posts
default_layout: post
titlecase: false # Transform title into titlecase
external_link: true # Open external links in new tab
filename_case: 0
render_drafts: false
post_asset_folder: false
relative_link: false
future: true
highlight:
enable: true
line_number: true
auto_detect: false
tab_replace:
# Home page setting
# path: Root path for your blogs index page. (default = '')
# per_page: Posts displayed per page. (0 = disable pagination)
# order_by: Posts order. (Order by date descending by default)
index_generator:
path: ''
per_page: 10
order_by: -date
# Category &amp;amp; Tag
default_category: uncategorized
category_map:
tag_map:
# Date / Time format
# Hexo uses Moment.js to parse and display date
# You can customize the date format as defined in
# http://momentjs.com/docs/#/displaying/format/
date_format: YYYY-MM-DD
time_format: HH:mm:ss
# Pagination
# Set per_page to 0 to disable pagination
per_page: 10
pagination_dir: page
# Extensions
# Plugins: https://hexo.io/plugins/
# Themes: https://hexo.io/themes/
theme: landscape
# Deployment
# Docs: https://hexo.io/docs/deployment.html
deploy:
type: git
repo: git@bitbucket.org:yamadharma/yamadharma.bitbucket.org.git
branch: master
# Feed
# https://github.com/hexojs/hexo-generator-feed
feed:
type: atom
path: atom.xml
limit: 20
hub:
content:
content_limit: 600
content_limit_delim: ' '
&lt;/code>&lt;/pre>
&lt;p>Таким образом, без настройки, получена работающая конфигурация.&lt;/p>
&lt;h2 id="порядок-работы-следующий">Порядок работы следующий&lt;/h2>
&lt;ul>
&lt;li>Создаём новый файл для поста:
&lt;pre>&lt;code>hexo new &amp;lt;title&amp;gt;
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>Радактируем пост.&lt;/li>
&lt;li>Генерим страницы:
&lt;pre>&lt;code>hexo generate
&lt;/code>&lt;/pre>
или
&lt;pre>&lt;code>hexo g
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>Выкладываем страницы на сайт:
&lt;pre>&lt;code>hexo deploy
&lt;/code>&lt;/pre>
или
&lt;pre>&lt;code>hexo d
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>Очищаем каталог:
&lt;pre>&lt;code>hexo clean
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul></description></item><item><title>Миграция с blogspot на hexo</title><link>https://yamadharma.github.io/ru/post/2018/03/27/from-blogspot-to-hexo/</link><pubDate>Tue, 27 Mar 2018 15:56:18 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2018/03/27/from-blogspot-to-hexo/</guid><description>&lt;h2 id="hexo">Hexo&lt;/h2>
&lt;p>Перешёл на &lt;a href="https://hexo.io" target="_blank" rel="noopener">hexo&lt;/a>. Дополнительно решил перенести свои заметки с &lt;a href="http://yamadharma.blogspot.ru/" target="_blank" rel="noopener">blogspot&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Установил пакет для миграции:&lt;/p>
&lt;pre>&lt;code>npm install hexo-migrator-blogger --save
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Подправил файл миграции
(&lt;code>node_modules/hexo-migrator-blogger/lib/migrate.js&lt;/code>), чтобы
нормальные названия файлов были:
{% codeblock lang:patch %}
&amp;mdash; migrate.js.old 2016-09-24 10:02:27.000000000 +0300
+++ migrate.js 2018-03-27 15:23:52.475311505 +0300
@@ -11,17 +11,19 @@ module.exports = function(source, target
var posts = JSON.parse(body).feed.entry;
async.each(posts, function(item, cb) {
var title = item.title[&amp;rsquo;$t&amp;rsquo;];&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;pre>&lt;code> var file = title.replace(/\s/g,'-').replace(/[^A-z 0-9 -]/g,'');
var published = item.published['$t'];
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;pre>&lt;code> var file = moment(published).format('YYYY-MM-DD') + '-' + title;
var tags = '';
if (item.category) {
tags = item.category.map(prop('term'));
}
var header = [
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;pre>&lt;code> 'title: |',
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;pre>&lt;code> '\t' + title,
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;pre>&lt;code> 'layout: post',
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;pre>&lt;code> 'title: ' + '\&amp;quot;' + title + '\&amp;quot;',
'date: ' + moment(published).format('YYYY-MM-DD HH:mm:ss'),
'tags: [' + tags + ']',
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;pre>&lt;code> 'categories: blog',
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;pre>&lt;code> 'lang: ru',
'---',
];
var content = item.content['$t'];
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;p>{% endcodeblock %}&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Запустил миграцию:&lt;/p>
&lt;pre>&lt;code>hexo migrate blogger &amp;quot;http://yamadharma.blogspot.ru/feeds/posts/default?alt=json&amp;amp;max-results=10000&amp;quot;
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Почистил получившиеся файлы:
{% codeblock lang:bash %}
#!/bin/bash&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="name-clean">name: clean&lt;/h1>
&lt;p>for i in &lt;em>.md
do
sed -i -e &amp;ldquo;s:&lt;/div>::g&amp;rdquo; &lt;br>
-e &amp;ldquo;s:&amp;lt;div.&lt;/em>&amp;gt;::g&amp;rdquo; &lt;br>
&amp;ldquo;$i&amp;rdquo;
done
{% endcodeblock %}&lt;/p>
&lt;ul>
&lt;li>Сделал транслит названий:
{% codeblock lang:bash %}
#!/bin/bash&lt;/li>
&lt;/ul>
&lt;h1 id="name-translit">name: translit&lt;/h1>
&lt;h1 id="перекодирует-рекурсивно-в-текущем-каталоге-имена">Перекодирует рекурсивно в текущем каталоге имена&lt;/h1>
&lt;h1 id="файлов-и-каталогов-в-транслит">файлов и каталогов в транслит.&lt;/h1>
&lt;h1 id="успенский-в-а-к-проблеме-транслитерации-русских-текстов-латинскими-буквами">Успенский В. А. К проблеме транслитерации русских текстов латинскими буквами&lt;/h1>
&lt;h1 id="httplingvoforumnetindexphptopic357580">&lt;a href="http://lingvoforum.net/index.php?topic=35758.0" target="_blank" rel="noopener">http://lingvoforum.net/index.php?topic=35758.0&lt;/a>&lt;/h1>
&lt;p>shopt -s nullglob
for NAME in *
do
TRS=&lt;code>echo $NAME | sed &amp;quot;y/абвгдезиклмнопрстуфц/abvgdeziklmnoprstufc/&amp;quot;&lt;/code>
TRS=&lt;code>echo $TRS | sed &amp;quot;y/АБВГДЕЗИКЛМНОПРСТУФЦ/ABVGDEZIKLMNOPRSTUFC/&amp;quot;&lt;/code>
TRS=${TRS//х/kh} TRS=${TRS//Х/KH};
TRS=${TRS//ч/ch} TRS=${TRS//Ч/CH};
TRS=${TRS//ш/sh} TRS=${TRS//Ш/SH};
TRS=${TRS//ё/yo} TRS=${TRS//Ё/YO};
TRS=${TRS//ж/zh} TRS=${TRS//Ж/ZH};
TRS=${TRS//щ/th} TRS=${TRS//Щ/TH};
TRS=${TRS//э/eh} TRS=${TRS//Э/EH};
TRS=${TRS//ю/yu} TRS=${TRS//Ю/YU};
TRS=${TRS//я/ya} TRS=${TRS//Я/YA};
TRS=${TRS//й/yj} TRS=${TRS//Й/yj};
TRS=${TRS//ъ/jh} TRS=${TRS//Ъ/JH};
TRS=${TRS//ь/j} TRS=${TRS//Ь/J};
TRS=${TRS//ы/ih} TRS=${TRS//Ы/IH};&lt;/p>
&lt;pre>&lt;code>TRS=${TRS// /_};
if [[ -d &amp;quot;$NAME&amp;quot; ]]
then
mv -v &amp;quot;$NAME&amp;quot; &amp;quot;$TRS&amp;quot;
cd &amp;quot;$TRS&amp;quot;
&amp;quot;$0&amp;quot;
cd ..
else
mv -v &amp;quot;$NAME&amp;quot; &amp;quot;$TRS&amp;quot;
fi
&lt;/code>&lt;/pre>
&lt;p>done
{% endcodeblock %}&lt;/p></description></item><item><title>Миграция с Drupal-6 на Drupal-8</title><link>https://yamadharma.github.io/ru/post/2015/11/19/drupal6-to-8/</link><pubDate>Thu, 19 Nov 2015 11:39:41 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2015/11/19/drupal6-to-8/</guid><description>&lt;h2 id="информация-по-миграции">Информация по миграции&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.drupal.org/upgrade/migrate" target="_blank" rel="noopener">Upgrading from Drupal 6 or 7 to Drupal 8&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.drupal.org/node/2257723" target="_blank" rel="noopener">Executing a Drupal 6/7 to Drupal 8 upgrade&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://drupalwatchdog.com/blog/2014/12/drupal-upgrade-1" target="_blank" rel="noopener">The Drupal 6 to 8 Upgrade Challenge&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.drupal.org/node/2167633" target="_blank" rel="noopener">Known Issues with the Drupal 6/7 -&amp;gt; 8 Upgrade Path&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="обновление-php">Обновление PHP&lt;/h2>
&lt;p>Для Drupal-8 нужен php-5.5. В Centos-7 идёт php-5.4. Обновим его до php-5.6. Вначале установним нужные репозитории
(см. &lt;a href="https://webtatic.com/packages/php56/" target="_blank" rel="noopener">https://webtatic.com/packages/php56/&lt;/a>):&lt;/p>
&lt;pre>&lt;code class="language-bash">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
&lt;/code>&lt;/pre>
&lt;p>Сделаем подмену дистрибутивного php на php-5.6:&lt;/p>
&lt;pre>&lt;code class="language-bash">yum install yum-plugin-replace
yum replace php-common --replace-with=php56w-common
yum install php56w-opcache
&lt;/code>&lt;/pre>
&lt;h2 id="установка-drush-8">Установка Drush 8&lt;/h2>
&lt;p>Установим Composer:&lt;/p>
&lt;pre>&lt;code class="language-bash">yum -y install composer
&lt;/code>&lt;/pre>
&lt;p>Установим Drush (dev):&lt;/p>
&lt;pre>&lt;code class="language-bash">mkdir /usr/local/src/drush
cd /usr/local/src/drush
composer require drush/drush:dev-master
ln -s /usr/local/src/drush/vendor/drush/drush/drush /usr/local/bin/drush
&lt;/code>&lt;/pre></description></item><item><title>Миграция с Samba3 на Samba4</title><link>https://yamadharma.github.io/ru/post/2015/10/27/samba-migrate/</link><pubDate>Tue, 27 Oct 2015 13:48:49 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2015/10/27/samba-migrate/</guid><description>&lt;h2 id="установка-пакетов">Установка пакетов&lt;/h2>
&lt;p>В качестве системы для сервера используем Centos7. Там пока не
поддерживается функционал Samba4 AD (конфликт mit-krb и heimdal). Поэтому поставим самбу с
EnterpriseSAMBA.com &lt;a href="https://portal.enterprisesamba.com/" target="_blank" rel="noopener">https://portal.enterprisesamba.com/&lt;/a>.&lt;/p>
&lt;pre>&lt;code class="language-bash">cd /etc/yum.repos.d
wget https://sernet-samba-public:Noo1oxe4zo@download.sernet.de/packages/samba/4.2/rhel/7/sernet-samba-4.2.repo
&lt;/code>&lt;/pre>
&lt;p>В файле &lt;code>/etc/yum.repos.d/sernet-samba-4.2.repo&lt;/code> заменим
&lt;code>USERNAME:ACCESSKEY&lt;/code> на свои данные либо на публичную учётную запись
&lt;code>sernet-samba-public:Noo1oxe4zo&lt;/code>.&lt;/p>
&lt;p>Установим нужные пакеты:&lt;/p>
&lt;pre>&lt;code class="language-bash">yum -y install sernet-samba sernet-samba-ad
yum -y install bind
&lt;/code>&lt;/pre>
&lt;h2 id="поиск-дубликатов-sid">Поиск дубликатов SID&lt;/h2>
&lt;p>Найдём дубликаты SID с помощью следующего скрипта (запусткается на
машине, где расположен ldap).&lt;/p>
&lt;pre>&lt;code class="language-python">#!/usr/bin/python
# A quick and dirty python script that checks for duplicat SID's using slapcat.
import os
data = os.popen(&amp;quot;slapcat | grep sambaSID&amp;quot;, 'r')
line = []
def anydup(thelist):
dups = list(set([x for x in thelist if thelist.count(x) &amp;gt; 1]))
for i in dups:
print &amp;quot;Duplicate id: &amp;quot;, i
for each_line in data:
line.append(each_line.strip())
anydup(line)
&lt;/code>&lt;/pre>
&lt;p>Далее дубликаты удаляются с помощью редактирования ldap (я использовал
&lt;a href="https://directory.apache.org/studio/" target="_blank" rel="noopener">https://directory.apache.org/studio/&lt;/a>).&lt;/p>
&lt;h2 id="предварительная-конфигурация">Предварительная конфигурация&lt;/h2>
&lt;p>Добавил в файл &lt;code>/etc/hosts&lt;/code> адрес хоста.&lt;/p>
&lt;pre>&lt;code>127.0.0.1 localhost.localdomain localhost
10.130.64.23 dc.dk.sci.pfu.edu.ru dc
&lt;/code>&lt;/pre>
&lt;p>Также прописал его в прямой и обратной зонах DNS.&lt;/p>
&lt;h2 id="перенос-конфигурационных-файлов">Перенос конфигурационных файлов&lt;/h2>
&lt;pre>&lt;code class="language-bash">pdc ~ # scp -r /var/lib/samba/private/ dc.dk.sci.pfu.edu.ru:/var/lib/samba/samba3tdb/
pdc ~ # scp /etc/samba/smb.conf dc.dk.sci.pfu.edu.ru:/var/lib/samba/samba3tdb/
&lt;/code>&lt;/pre>
&lt;p>В &lt;code>/var/lib/samba/samba3tdb/smb.conf&lt;/code> следует заменить имя контроллера домена.&lt;/p>
&lt;pre>&lt;code>netbios name = dc
&lt;/code>&lt;/pre>
&lt;p>Поскольку при миграции используется информация из ldap, на хосте &lt;code>dc&lt;/code>
задаю файл &lt;code>/etc/openldap/ldap.conf&lt;/code>.&lt;/p>
&lt;pre>&lt;code>BASE dc=dk,dc=sci,dc=pfu,dc=edu,dc=ru
URI ldap://ldap.dk.sci.pfu.edu.ru
TLS_REQCERT allow
&lt;/code>&lt;/pre>
&lt;h2 id="проведение-миграции">Проведение миграции&lt;/h2>
&lt;pre>&lt;code class="language-bash">samba-tool domain classicupgrade --dbdir=/var/lib/samba/samba3tdb/ --use-xattrs=yes --realm=dk.sci.pfu.edu.ru --dns-backend=BIND9_DLZ /var/lib/samba/samba3tdb/smb.conf
&lt;/code>&lt;/pre>
&lt;h3 id="шаманство">Шаманство&lt;/h3>
&lt;p>В файле &lt;code>/var/lib/samba/samba3tdb/smb.conf&lt;/code> заменил доменное имя&lt;/p>
&lt;pre>&lt;code>passdb backend = ldapsam:ldap://ldap.dk.sci.pfu.edu.ru
&lt;/code>&lt;/pre>
&lt;p>на ip-адрес&lt;/p>
&lt;pre>&lt;code>passdb backend = ldapsam:ldap://10.130.64.11
&lt;/code>&lt;/pre>
&lt;p>Без этого миграция падала с ошибкой &lt;code>LDAP client internal error: NT_STATUS_BAD_NETWORK_NAME&lt;/code>.&lt;/p>
&lt;h3 id="настройка-firewalld">Настройка firewalld&lt;/h3>
&lt;pre>&lt;code class="language-bash">firewall-cmd --add-service=ldap --permanent
firewall-cmd --add-service=kerberos --permanent
firewall-cmd --add-service=kpasswd --permanent
firewall-cmd --add-service=samba --permanent
firewall-cmd --add-service=samba-client --permanent
firewall-cmd --reload
&lt;/code>&lt;/pre>
&lt;h3 id="настройка-selinux">Настройка SELinux&lt;/h3>
&lt;pre>&lt;code class="language-bash">setsebool -P samba_export_all_ro 1
setsebool -P samba_export_all_rw 1
setsebool -P samba_domain_controller 1
&lt;/code>&lt;/pre>
&lt;h3 id="настройка-kerberos">Настройка Kerberos&lt;/h3>
&lt;p>Создадим файл конфигурации kerberos:&lt;/p>
&lt;pre>&lt;code class="language-bash">mv /etc/krb5.conf{,.default}
cp /var/lib/samba/private/krb5.conf /etc
&lt;/code>&lt;/pre>
&lt;h3 id="настройка-dns">Настройка DNS&lt;/h3>
&lt;p>В файле &lt;code>/etc/resolv.conf&lt;/code> задаём локальный DNS-сервер:&lt;/p>
&lt;pre>&lt;code>search dk.sci.pfu.edu.ru
nameserver 127.0.0.1
&lt;/code>&lt;/pre>
&lt;p>В &lt;code>/etc/named.conf&lt;/code> подключаем сконфигурённую конфигурацию:&lt;/p>
&lt;pre>&lt;code>include &amp;quot;/var/lib/samba/private/named.conf&amp;quot;;
&lt;/code>&lt;/pre>
&lt;p>Также в раздел &lt;code>options&lt;/code> добавляем:&lt;/p>
&lt;pre>&lt;code>options {
[...]
tkey-gssapi-keytab &amp;quot;/var/lib/samba/private/dns.keytab&amp;quot;;
[...]
};
&lt;/code>&lt;/pre>
&lt;p>А также следующее:&lt;/p>
&lt;pre>&lt;code>options {
[...]
allow-query { localhost; 10.128.0.0/9; };
allow-update { 10.128.0.0/9; 127.0.0.0/8; };
forwarders { 10.130.64.239; 8.8.8.8; 8.8.4.4; };
allow-transfer {
# this config is for a single master DNS server
none;
};
[...]
};
&lt;/code>&lt;/pre>
&lt;h3 id="настройка-firewalld-1">Настройка firewalld&lt;/h3>
&lt;pre>&lt;code class="language-bash">firewall-cmd --add-service=dns --permanent
firewall-cmd --reload
&lt;/code>&lt;/pre>
&lt;h3 id="настройки-прав-доступа">Настройки прав доступа&lt;/h3>
&lt;p>Права доступа:&lt;/p>
&lt;pre>&lt;code class="language-bash">chown -R root:named /var/lib/samba/private/dns
chmod 770 /var/lib/samba/private/dns
chgrp named /var/lib/samba/private/dns.keytab
chmod g+r /var/lib/samba/private/dns.keytab
chgrp named /var/lib/samba/private
chgrp -R named /var/lib/samba/private/sam.ldb.d
chmod g+rw /var/lib/samba/private/sam.ldb.d/*
&lt;/code>&lt;/pre>
&lt;h3 id="настройка-selinux-1">Настройка SELinux&lt;/h3>
&lt;p>Изменим текущий контекст:&lt;/p>
&lt;pre>&lt;code class="language-bash">chcon -t named_conf_t /var/lib/samba/private/dns.keytab
chcon -t named_conf_t /var/lib/samba/private/named.conf
chcon -t named_conf_t /var/lib/samba/private/named.conf.update
chcon -R -t named_var_run_t /var/lib/samba/private/dns
chcon -t named_var_run_t /var/lib/samba/private/dns/${MYREALM}.zone
&lt;/code>&lt;/pre>
&lt;p>Изменим постоянный контекст:&lt;/p>
&lt;pre>&lt;code class="language-bash">semanage fcontext -a -t named_conf_t /var/lib/samba/private/dns.keytab
semanage fcontext -a -t named_conf_t /var/lib/samba/private/named.conf
semanage fcontext -a -t named_conf_t /var/lib/samba/private/named.conf.update
semanage fcontext -a -t named_var_run_t &amp;quot;/var/lib/samba/private/dns(/.*)?&amp;quot;
semanage fcontext -a -t named_var_run_t /var/lib/samba/private/dns/${MYREALM}.zone
semanage fcontext -a -t named_var_run_t /var/lib/samba/private/dns/${MYREALM}.zone.jnl
&lt;/code>&lt;/pre>
&lt;h2 id="запуск-демонов">Запуск демонов&lt;/h2>
&lt;p>Сконфигурим тип сервера samba в файле &lt;code>/etc/default/sernet-samba&lt;/code>:&lt;/p>
&lt;pre>&lt;code>SAMBA_START_MODE=&amp;quot;ad&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Запустим демоны:&lt;/p>
&lt;pre>&lt;code class="language-bash">systemctl start named.service
systemctl start sernet-samba-ad.service
&lt;/code>&lt;/pre>
&lt;p>Добавим их в автозагрузку:&lt;/p>
&lt;pre>&lt;code class="language-bash">systemctl enable named.service
systemctl enable sernet-samba-ad.service
&lt;/code>&lt;/pre>
&lt;h2 id="проверка">Проверка&lt;/h2>
&lt;p>Проверка DNS.&lt;/p>
&lt;pre>&lt;code class="language-bash"># host -t SRV _ldap._tcp.dk.sci.pfu.edu.ru.
_ldap._tcp.dk.sci.pfu.edu.ru has SRV record 0 100 389 dc.dk.sci.pfu.edu.ru.
# host -t SRV _kerberos._udp.dk.sci.pfu.edu.ru.
_kerberos._udp.dk.sci.pfu.edu.ru has SRV record 0 100 88 dc.dk.sci.pfu.edu.ru.
# host -t A dc.dk.sci.pfu.edu.ru.
dc.dk.sci.pfu.edu.ru has address 10.130.64.23
&lt;/code>&lt;/pre>
&lt;p>Замена пароля администратора:&lt;/p>
&lt;pre>&lt;code class="language-bash">samba-tool user setpassword Administrator
&lt;/code>&lt;/pre>
&lt;p>Проверка &lt;code>smbclient&lt;/code>:&lt;/p>
&lt;pre>&lt;code class="language-bash">smbclient //localhost/netlogon -UAdministrator -c 'ls'
&lt;/code>&lt;/pre>
&lt;p>Аналогичный результат должно давать (&lt;code>dc&lt;/code> &amp;mdash; имя сервера):&lt;/p>
&lt;pre>&lt;code class="language-bash">smbclient //dc/netlogon -k -c 'ls'
&lt;/code>&lt;/pre>
&lt;p>Проверка kerberos:&lt;/p>
&lt;pre>&lt;code class="language-bash">kinit administrator@DK.SCI.PFU.EDU.RU
klist
&lt;/code>&lt;/pre>
&lt;h2 id="дополнительно">Дополнительно&lt;/h2>
&lt;p>Убрать проверку сложности пароля:&lt;/p>
&lt;pre>&lt;code class="language-bash">samba-tool domain passwordsettings set --complexity=off
samba-tool domain passwordsettings set --history-length=0
samba-tool domain passwordsettings set --min-pwd-age=0
samba-tool domain passwordsettings set --max-pwd-age=0
&lt;/code>&lt;/pre></description></item><item><title>Настройка SELinux для некоторых приложений</title><link>https://yamadharma.github.io/ru/post/2015/05/15/selinux-apps/</link><pubDate>Fri, 15 May 2015 05:56:13 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2015/05/15/selinux-apps/</guid><description>&lt;ul>
&lt;li>&lt;code>setsebool&lt;/code> запускаем как с ключём &lt;code>-P&lt;/code> (для запоминания настроек), так и без него (чтобы работало в текущей сессии).&lt;/li>
&lt;/ul>
&lt;h2 id="a-namehead_www-servera-www-сервер">&lt;a name='head_www-server'>&lt;/a> WWW-сервер&lt;/h2>
&lt;pre>&lt;code class="language-bash">setsebool -P httpd_unified 1
setsebool -P httpd_can_network_connect_db 1
setsebool -P httpd_can_network_connect 1
setsebool -P httpd_can_network_relay 1
setsebool -P httpd_can_sendmail 1
setsebool -P httpd_execmem 1
setsebool -P httpd_use_fusefs 1
&lt;/code>&lt;/pre>
&lt;h2 id="a-namehead_dba-базы-данных">&lt;a name='head_db'>&lt;/a> Базы данных&lt;/h2>
&lt;ul>
&lt;li>Postgres&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">setsebool -P selinuxuser_postgresql_connect_enabled 1
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>MySQL&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">setsebool -P selinuxuser_mysql_connect_enabled 1
&lt;/code>&lt;/pre>
&lt;h2 id="ojs">OJS&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Настраиваем &lt;a href="#head_www-server">www-сервер&lt;/a> и &lt;a href="#head_db">базу данных&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Настраиваем доступ к файловой системе.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">semanage fcontext --add -t httpd_sys_rw_content_t &amp;quot;/var/www/html/ojs/cache(/.*)?&amp;quot;
semanage fcontext --add -t httpd_sys_rw_content_t &amp;quot;/var/www/html/ojs/public(/.*)?&amp;quot;
semanage fcontext --add -t httpd_sys_rw_content_t &amp;quot;/var/www/html/ojs/config.inc.php&amp;quot;
semanage fcontext --add -t httpd_sys_rw_content_t &amp;quot;/var/www/html/ojs/plugins/generic(/.*)?&amp;quot;
semanage fcontext --add -t httpd_sys_rw_content_t &amp;quot;/var/www/data(/.*)?&amp;quot;
&lt;/code>&lt;/pre>
&lt;h2 id="drupal">Drupal&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Настраиваем &lt;a href="#head_www-server">www-сервер&lt;/a> и &lt;a href="#head_db">базу данных&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Настраиваем доступ к файловой системе.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">semanage fcontext --add -t httpd_sys_rw_content_t &amp;quot;/var/www/html/sites/drupal/(.*)/sites/(.*)/files(/.*)?&amp;quot;
semanage fcontext --add -t httpd_sys_rw_content_t &amp;quot;/var/www/html/sites/drupal/(.*)/cache(/.*)?&amp;quot;
semanage fcontext --add -t httpd_sys_rw_content_t &amp;quot;/var/www/html/sites/drupal/(.*)/sites/all(/.*)?&amp;quot;
&lt;/code>&lt;/pre>
&lt;h2 id="moodle">Moodle&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Настраиваем &lt;a href="#head_www-server">www-сервер&lt;/a> и &lt;a href="#head_db">базу данных&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Настраиваем доступ к файловой системе.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">semanage fcontext --add -t httpd_sys_rw_content_t &amp;quot;/var/www/moodle/web-git/mod(/.*)?&amp;quot;
semanage fcontext --add -t httpd_sys_rw_content_t &amp;quot;/var/www/moodle/web-git/local(/.*)?&amp;quot;
semanage fcontext --add -t httpd_sys_rw_content_t &amp;quot;/var/www/moodle/web-git/theme(/.*)?&amp;quot;
&lt;/code>&lt;/pre>
&lt;h2 id="letsencript">LetsEncript&lt;/h2>
&lt;pre>&lt;code class="language-bash">semanage fcontext -a -t cert_t '/etc/letsencrypt/(archive|live)(/.*)?'
&lt;/code>&lt;/pre></description></item><item><title>Установка виртуальной машины NOC на oVirt</title><link>https://yamadharma.github.io/ru/post/2015/05/13/ova-on-ovirt/</link><pubDate>Wed, 13 May 2015 08:48:57 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2015/05/13/ova-on-ovirt/</guid><description>&lt;p>Чтобы не мучиться с установкой &lt;a href="https://kb.nocproject.org" target="_blank" rel="noopener">NOC&lt;/a> решил установить с образа, &lt;a href="https://kb.nocproject.org/display/SITE/Downloads" target="_blank" rel="noopener">предлагаемого на сайте&lt;/a>. К сажалению, образ предлагается в формате &lt;code>ova&lt;/code>, а у меня стоит oVirt (&lt;code>ovirt-engine&lt;/code>). Он этот формат не понимает. Однако у меня есть ещё хост с &lt;code>kvm&lt;/code> (&lt;code>kvm-host&lt;/code>).&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Распаковываю &lt;code>noc-x86_64-Debian-8.ova&lt;/code>:
{% codeblock lang:bash %}
tar -xf noc-x86_64-Debian-8.ova
{% endcodeblock %}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Конвертирую в формат &lt;code>qcow2&lt;/code>:
{% codeblock lang:bash %}
qemu-img convert -O qcow2 noc-x86_64-Debian-8-disk1.vmdk noc-x86_64-Debian-8-disk1.qcow2
{% endcodeblock %}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Создаю виртуальную машину на kvm. По большому счёту это нужно лишь для создания xml-файла описания виртуальной машины.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Машина сначала не загрузилась потому, что в &lt;code>/etc/fstab&lt;/code> на &lt;code>/boot&lt;/code> был жёстко прописан &lt;code>/dev/sda1&lt;/code>. Поменял на &lt;code>/dev/vda1&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Пароли следующие:
{% codeblock lang:bash %}
Username: user
Password: thenocproject
Root password: thenocproject
{% endcodeblock %}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>На web-интерфейс логин и пароль:
{% codeblock lang:bash %}
User: admin
Password: admin
{% endcodeblock %}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Образы на &lt;code>kvm-host&lt;/code> находятся в каталоге &lt;code>/var/lib/libvirt/images&lt;/code>, а соответствующие конфигурационные файлы в &lt;code>/etc/libvirt/qemu&lt;/code>. Копируем нужный конфиг в &lt;code>/var/lib/libvirt/images&lt;/code> и называем &lt;code>noc-x86_64-Debian-8-disk1.xml&lt;/code>. Поскольку будем работать по сети, заменяем в нём путь к образу с &lt;code>/var/lib/...&lt;/code> на &lt;code>/net/kvm-host/var/lib/...&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Заходим на хост &lt;code>ovirt-engine&lt;/code>, монтируем &lt;code>kvm-host&lt;/code> по autofs:
{% codeblock lang:bash %}
cd /net/kvm-host/var/lib/libvirt/images
{% endcodeblock %}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Импортируем образ в oVirt:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>{% codeblock lang:bash %}
virt-v2v -b vlan5 -i libvirtxml -o rhev -os ovirt-node-01:/ovirt/export noc-x86_64-Debian-8-disk1.xml
{% endcodeblock %}&lt;/p>
&lt;p>Здесь &lt;code>ovirt-node-01&lt;/code> — узел, на котором запускаются виртуальные машины, &lt;code>vlan5&lt;/code> — интерфейс, к которому она будет подключена.&lt;/p></description></item><item><title>Поддержка многоязычности</title><link>https://yamadharma.github.io/ru/post/2015/04/20/octopus-multilingual/</link><pubDate>Mon, 20 Apr 2015 13:17:32 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2015/04/20/octopus-multilingual/</guid><description>&lt;p>Добавим в конфигурационный файл (&lt;code>_config.yml&lt;/code>):&lt;/p>
&lt;pre>&lt;code class="language-yaml">gems:
- octopress-multilingual
- octopress-linkblog
&lt;/code>&lt;/pre>
&lt;p>Также зададим язык по-умолчанию:&lt;/p>
&lt;pre>&lt;code class="language-yaml">lang: ru
&lt;/code>&lt;/pre>
&lt;h2 id="язык-для-постов">Язык для постов&lt;/h2>
&lt;p>Добавим язык в заголовок шаблонов:&lt;/p>
&lt;pre>&lt;code class="language-yaml">lang: ru
&lt;/code>&lt;/pre>
&lt;h2 id="конфигурация-для-разных-языков">Конфигурация для разных языков&lt;/h2>
&lt;p>В каталоге &lt;code>_data&lt;/code> создадим конфигурационные файлы вида
&lt;code>lang_[language_code].yml&lt;/code>:&lt;/p>
&lt;pre>&lt;code class="language-yaml">_data
lang_en.yml
lang_ru.yml
&lt;/code>&lt;/pre>
&lt;p>Примерное их содержание:&lt;/p>
&lt;pre>&lt;code class="language-yaml"># lang_en.yml
title: English title
# lang_ru.yml
title: Русское название сайта
&lt;/code>&lt;/pre></description></item><item><title>Перенос блога на Jekyll + Octopress</title><link>https://yamadharma.github.io/ru/post/2015/03/23/jekyll-octopress/</link><pubDate>Mon, 23 Mar 2015 13:51:36 +0300</pubDate><guid>https://yamadharma.github.io/ru/post/2015/03/23/jekyll-octopress/</guid><description>&lt;h2 id="репозиторий-для-сайта">Репозиторий для сайта&lt;/h2>
&lt;ul>
&lt;li>Создал локальный каталог для сайта:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">mkdir ~/mysite
&lt;/code>&lt;/pre>
&lt;h2 id="локальный-git-репозиторий">Локальный git-репозиторий&lt;/h2>
&lt;ul>
&lt;li>Создал пустой git-репозиторий:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">cd ~/mysite
git init
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Создал в нём файл &lt;code>README.md&lt;/code>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">touch README.md
``
- Сделал коммит:
```bash
git add .
git commit -am 'Initial commit'
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Создаю ветку для кода (в &lt;code>master&lt;/code> будет сайт):&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">git branch source
git checkout source
&lt;/code>&lt;/pre>
&lt;p>&lt;a href="##head_site-template-create">Далее создаю шаблон для сайта&lt;/a> в ветке &lt;code>source&lt;/code>.&lt;/p>
&lt;h4 id="репозиторий-на-bitbucket">Репозиторий на Bitbucket&lt;/h4>
&lt;p>Я пользовался &lt;a href="https://confluence.atlassian.com/display/BITBUCKET/Publishing&amp;#43;a&amp;#43;Website&amp;#43;on&amp;#43;Bitbucket" target="_blank" rel="noopener">инструкцией от bitbucket&amp;rsquo;а&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Создал на bitbucket&amp;rsquo;е репозиторий с названием
&lt;code>yamadharma.bitbucket.org&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Выложил репозиторий&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">cd ~/mysite
git remote add origin git@bitbucket.org:yamadharma/yamadharma.bitbucket.org.git
git push -u origin --all
git push -u origin --tags
&lt;/code>&lt;/pre>
&lt;h2 id="выкладывание-сайта-на-bitbucket">Выкладывание сайта на Bitbucket&lt;/h2>
&lt;ul>
&lt;li>Создал файл &lt;code>_deploy.yml&lt;/code> с помощью команды&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">octopress deploy init git -u git@bitbucket.org:yamadharma/yamadharma.bitbucket.org.git
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Подредактировал &lt;code>.gitignore&lt;/code>:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">echo &amp;quot;.deploy&amp;quot; &amp;gt;&amp;gt; .gitignore
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Сгенерил сайт:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">jekyll b
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Выложил существующий сайт:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">octopress deploy
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Положил ветку &lt;code>source&lt;/code> на git:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">git add .
git commit -am 'Поправил сайт'
git push
&lt;/code>&lt;/pre>
&lt;h2 id="a-namehead_site-template-createa-создание-шаблона-сайта">&lt;a name='head_site-template-create'>&lt;/a> Создание шаблона сайта&lt;/h2>
&lt;ul>
&lt;li>В каталоге сайта создаю шаблон:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-bash">cd ~/mysite
git checkout source
octopress new -f .
&lt;/code>&lt;/pre></description></item><item><title>Счастье есть</title><link>https://yamadharma.github.io/ru/post/2007/06/30/schaste-est/</link><pubDate>Sat, 30 Jun 2007 13:30:00 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2007/06/30/schaste-est/</guid><description>&lt;p>Просидел всю неделю под виндой. Качал MSDN. К концу недели стало уже плохо. В пятницу поставил Vista. Это добило меня окончательно. Вечером перегрузился под Linux. Счастье есть.&lt;/p></description></item><item><title>К вопросу о настройке маршрутизатора ASUS WL-500gP</title><link>https://yamadharma.github.io/ru/post/2007/01/14/k-voprosu-o-nastrojke-marshrutizatora-asus-wl-500gp/</link><pubDate>Sun, 14 Jan 2007 18:18:00 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2007/01/14/k-voprosu-o-nastrojke-marshrutizatora-asus-wl-500gp/</guid><description>&lt;p>При настройке возникли следующие проблемы.&lt;/p>
&lt;ol>
&lt;li>Нужно было догадаться, что сервер доступа в настройках называется Heart-Beat Server.&lt;/li>
&lt;li>Задавать маршрутизацию можно либо на на внутреннем eth (LAN), либо на внешнем ppp (WAN). Таким образом, получить доступ к домашней сети провайдера оказалось невозможным. Пришлось качать альтернативную прошивку (&lt;a href="http://oleg.wl500g.info/%29" target="_blank" rel="noopener">http://oleg.wl500g.info/)&lt;/a>, в которой возможно (кроме кучи других бонусов) задавать маршрутную таблицу на внешнем eth (MAN) интерфейсе.&lt;/li>
&lt;/ol></description></item><item><title>Monit и gentoo rc-scripts</title><link>https://yamadharma.github.io/ru/post/2006/09/17/monit-i-gentoo-rc-scripts/</link><pubDate>Sun, 17 Sep 2006 20:55:00 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2006/09/17/monit-i-gentoo-rc-scripts/</guid><description>&lt;p>При использовании monit для перезапуска rc-скриптов в gentoo использовал killall и опцию zap.&lt;br>
Нашёл это-же решение, но оформленное красивее.&lt;/p>
&lt;p>Это файл /etc/monit.d/bin/kickservice&lt;/p>
&lt;pre>&lt;code class="language-bash">##!/bin/sh
## kickservice by Eric Radman
## Script used by monit to kill off and restart daemons
## /etc/monit.d/bin/kickservice
function stop ()
{
    /etc/init.d/$1 pause
    /etc/init.d/$1 zap
    if [ &amp;quot;$2&amp;quot; == &amp;quot;kill&amp;quot; ]
        then
        /bin/killall $3
    fi
}
function start ()
{
    /etc/init.d/$1 zap
    /etc/init.d/$1 start
}
case &amp;quot;$1&amp;quot; in
start)
    start $2 $3 $4
    ;;
stop)
    stop $2 $3 $4
    ;;
*)
    echo &amp;quot;Usage: kickservice [start|stop] [service] kill [daemon]&amp;quot;
    ;;
esac
&lt;/code>&lt;/pre>
&lt;p>Проблема возникла из-за того, что при установке baselayout-1.12.x перестал нормально работать pppd (при подключении через pptp к VPN-серверу провайдера). Очень часто соединение не устанавливается (вина, думаю, провайдерского сервера). По идее после этого он должен перезапускаться, а он просто ничего не делал. Решил снять проблему с помощью monit.&lt;br>
Убрал net.ppp0 из загрузки, и заставил monit мониторить ppp0.&lt;/p>
&lt;p>Вот скрипт /etc/monit.d/ppp0&lt;/p>
&lt;pre>&lt;code class="language-bash">check process pppd with pidfile /var/run/ppp0.pid
   start program = &amp;quot;/etc/monit.d/bin/kickservice start net.ppp0&amp;quot;
   stop program = &amp;quot;/etc/monit.d/bin/kickservice stop net.ppp0 kill pppd&amp;quot;
  if 5 restarts within 5 cycles then timeout
&lt;/code>&lt;/pre>
&lt;p>P. S. Хотел запостить скрипты, но не знаю как :(&lt;/p></description></item><item><title>Gentoo: конвертация из x86 в x86_64 (2)</title><link>https://yamadharma.github.io/ru/post/2006/08/21/gentoo-konvertatsija-iz-x86-v-x86-64-2/</link><pubDate>Mon, 21 Aug 2006 12:19:00 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2006/08/21/gentoo-konvertatsija-iz-x86-v-x86-64-2/</guid><description>&lt;ol>
&lt;li>Провозившись с данной проблемой выходные (и частично неделю),
провёл конвертацию.&lt;/li>
&lt;li>Оказалось, что всё очень просто.&lt;/li>
&lt;li>Однако, после начала обновления системы (&lt;code>emerge -e system&lt;/code>), стали
отваливаться приложения (не могут подгрузить библиотеки).&lt;/li>
&lt;li>К сожалению, в новом профайле не поддерживается построение
библиотек под несколько архитектур (может, просто я не знаю).&lt;/li>
&lt;li>Хотя в консоли всё функционирует нормально.&lt;/li>
&lt;li>Скоро, надеюсь, всё конвертну.&lt;/li>
&lt;/ol></description></item><item><title>Gentoo: конвертация из x86 в x86_64</title><link>https://yamadharma.github.io/ru/post/2006/08/18/gentoo-konvertatsija-iz-x86-v-x86-64/</link><pubDate>Fri, 18 Aug 2006 09:21:00 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2006/08/18/gentoo-konvertatsija-iz-x86-v-x86-64/</guid><description>&lt;ol>
&lt;li>На недавно обновлённом компьютере (до этого был Pentium III)
крутится 32-битная ОС (Gentoo Linux) (Hurd и Plan9 не учитываю).&lt;/li>
&lt;li>Решил конвертнуть в 64-битную. Однако документации по этому вопросу
не нашёл.&lt;/li>
&lt;li>Так-что решил заняться самодеятельностью. Как получится, напишу об этом (с приложением скриптов).&lt;/li>
&lt;/ol></description></item><item><title>Пожаротушение</title><link>https://yamadharma.github.io/ru/post/2006/07/14/firefighting/</link><pubDate>Fri, 14 Jul 2006 11:48:00 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2006/07/14/firefighting/</guid><description>&lt;p>Новая ссылочка по системам пожаротушения:
&lt;a href="http://www.ista-tech.ru/fire/statya/sx/ART/810/BRN/1245.html" target="_blank" rel="noopener">http://www.ista-tech.ru/fire/statya/sx/ART/810/BRN/1245.html&lt;/a>&lt;/p>
&lt;p>Цитата:&lt;/p>
&lt;blockquote>
&lt;p>По степени вредного воздействия на материальные ценности при срабатывании САП образуют (в порядке убывания вредности) следующий ряд:&lt;/p>
&lt;ul>
&lt;li>аэрозольные и порошковые;&lt;/li>
&lt;li>пенные и водо-пенные;&lt;/li>
&lt;li>водяные;&lt;/li>
&lt;li>системы тонкодисперсной воды;&lt;/li>
&lt;li>газовые.&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Гроза</title><link>https://yamadharma.github.io/ru/post/2006/07/12/groza/</link><pubDate>Wed, 12 Jul 2006 10:06:00 +0000</pubDate><guid>https://yamadharma.github.io/ru/post/2006/07/12/groza/</guid><description>&lt;p>В воскресенье была гроза. Сработала система пожаротушения (замкнуло?). От Этого умерли все сервера на открытой стойке. В том числе и почта.&lt;/p>
&lt;p>В понедельник была гроза. Дома сгорел монитор.&lt;/p>
&lt;p>Почту ещё не поднял.&lt;/p>
&lt;p>Вот ссылочка:
&lt;a href="http://www.ivd.ru/document.xgi?id=4941&amp;amp;gid=393&amp;amp;hid=485&amp;amp;oid=485" target="_blank" rel="noopener">http://www.ivd.ru/document.xgi?id=4941&amp;gid=393&amp;hid=485&amp;oid=485&lt;/a>&lt;/p>
&lt;p>Цитата:&lt;/p>
&lt;blockquote>
&lt;p>Недостатков тоже хватает. Во-первых, тушащий материал при взаимодействии с влагой дает щелочную (аэрозоли) или кислотную реакцию (порошки), что может приводить к коррозии металла, деструкции материалов, а также к выводу из строя электронной техники. Во-вторых, в момент срабатывания системы видимость в помещении снижается почти до нуля, что небезопасно для не успевших эвакуироваться людей. В-третьих, попадание порошков и аэрозолей в глаза или дыхательные пути вредно для здоровья. В-четвертых, порошки слеживаются, что ограничивает срок их хранения (необходима перезарядка или замена устройств тушения раз в 5 - 10 лет).&lt;/p>
&lt;p>Первые три недостатка обусловливают повышенные требования к надежности систем, в частности к защите от ложного срабатывания.&lt;/p>
&lt;/blockquote></description></item></channel></rss>